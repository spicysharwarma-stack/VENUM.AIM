--[[
    üêç Venom Reptile v8.3 - Ultimate Stealth Edition
    Advanced Threat Assessment & Targeting System
    Universal Xeno Executor Version - Fully Optimized
    PERFECT STEALTH/COMBAT DETECTION - REALISTIC BEHAVIOR
    PREMIUM VISUALS & SMOOTH PERFORMANCE
    WITH ENHANCED THERMAL VISION & NIGHT VISION
]]

-- Services
local Camera = workspace.CurrentCamera
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local Lighting = game:GetService("Lighting")
local LocalPlayer = Players.LocalPlayer

-- Premium Configuration
local Settings = {
    Enabled = true,
    TeamCheck = false,
    AimPart = "Head",
    Sensitivity = 0.06,
    FOV = {
        Radius = 130,
        Color = Color3.fromRGB(0, 255, 180),
        Transparency = 0.7,
        Filled = false,
        Visible = true,
        Thickness = 2,
        Sides = 64
    },
    VisibilityCheck = true,
    MaxDistance = 2500,
    Prediction = {
        Enabled = true,
        Strength = 0.165,
        VerticalAdjustment = 0.05
    },
    Highlight = {
        Enabled = true,
        Color = Color3.fromRGB(255, 223, 0)
    },
    Humanizer = {
        Enabled = true,
        Intensity = 0.3,
        MissChance = 0.15,
        MissCooldown = 0.5,
        BodyPartRandomization = 0.7
    },
    SmartSwitch = {
        Enabled = true,
        ThreatEvaluationInterval = 0.3,
        TargetLockDuration = 1.8,
        TargetSwitchCooldown = 0.5,
        MinThreatDifference = 25,
        RecentTargetBonus = 15
    },
    Radar = {
        Enabled = true,
        Size = 120,
        Range = 300,
        BackgroundTransparency = 0.8,
        Position = UDim2.new(1, -140, 1, -140),
        RefreshRate = 0.2
    },
    ThermalVision = {
        Enabled = false,
        HotColor = Color3.fromRGB(255, 100, 70),      -- Warmer red-orange for players
        ColdColor = Color3.fromRGB(50, 30, 100),      -- Deep purple-blue for cold areas
        AmbientColor = Color3.fromRGB(120, 40, 60),   -- Deep red ambient for eye comfort
        Intensity = 0.8,
        EyeComfortMode = true                         -- Red light for reduced eye strain
    },
    NightVision = {
        Enabled = false,
        Color = Color3.fromRGB(180, 255, 180),        -- Softer green for better night vision
        Intensity = 0.7,
        Brightness = 0.6,
        Contrast = 0.6
    },
    FOVChangeOnAim = true,
    AimKey = Enum.UserInputType.MouseButton2,
    ToggleKey = Enum.KeyCode.F,
    
    -- Enhanced threat evaluation settings
    CloseRangePriority = 30,
    ImmediateThreatBonus = 25,
    RecentTargetMemory = 3,
    
    -- Revised threat evaluation factors
    FacingPlayerBonus = 15,
    HighGroundBonus = 8,
    WeaponThreatMultiplier = 1.3,
    VisibleTargetBonus = 20,
    
    -- New threat evaluation factors
    DamageDealtBonus = 15,
    MovementThreatFactor = 0.8,
    RecentCombatMemory = 5,
    
    -- Enhanced Playstyle adaptation settings
    PlaystyleAdaptation = {
        Enabled = true,
        AggressionThreshold = 70,
        StealthTime = 10,
        RecentTargetWeight = 0.7,
        LearningRate = 0.1,
        EngagementDistanceWeight = 0.3,
        TargetSwitchFrequencyWeight = 0.2,
        AccuracyBasedAdaptation = true,
        MinEngagementDistance = 50,
        MaxEngagementDistance = 200,
        CloseQuartersBonus = 15,
        LongRangePenalty = 10,
        DetectionThreshold = 0.4,
        StealthEngagementBonus = 20,
        CombatCooldown = 3
    },
    
    -- Enhanced Adaptive FOV settings
    DynamicFOVSettings = {
        Enabled = true,
        BaseFOV = 130,
        PerformanceScaling = true,
        EngagementScaling = true,
        MinFOV = 80,
        MaxFOV = 200,
        StealthFOV = 120,
        CombatFOV = 140,
        TransitionSmoothness = 0.1
    },
    
    -- Premium features
    SoundEffects = false,
    KillConfirmation = true,
    AdvancedVisuals = true,
    DynamicFOV = true
}

-- State Management
local Holding = false
local Target = nil
local LastTargetTime = 0
local threatLabel
local radarFrame
local radarDots = {}
local lastMissTime = 0
local lastHumanizerUpdate = 0
local recentTargets = {}
local lastRadarUpdate = 0
local lastTargetSwitch = 0
local targetLockTime = 0
local currentFOV = Settings.FOV.Radius
local combatEvents = {}
local lastDamageTaken = 0
local damageSource = nil

-- Vision effects
local thermalEffect = Instance.new("ColorCorrectionEffect")
local nightVisionEffect = Instance.new("ColorCorrectionEffect")
local bloomEffect = Instance.new("BloomEffect")
local thermalHighlights = {}

-- Playstyle tracking
local playstyleMetrics = {
    isStealthMode = true,
    lastCombatTime = 0,
    averageEngagementDistance = 100,
    engagementCount = 0,
    targetSwitchFrequency = 0,
    recentTargets = {},
    preferredTargets = {},
    weaponUsage = {},
    accuracyStats = {
        shotsFired = 0,
        shotsHit = 0,
        lastAccuracyUpdate = 0
    },
    detectionLevel = 0,
    lastMovementUpdate = 0,
    movementPattern = "stationary",
    lastShotTime = 0,
    combatActions = 0,
    lastDetectionUpdate = 0
}

-- Performance tracking
local lastFPSUpdate = 0
local frameCount = 0
local currentFPS = 60

-- Premium Color Scheme
local PremiumColors = {
    Primary = Color3.fromRGB(0, 255, 180),
    Secondary = Color3.fromRGB(0, 200, 150),
    Accent = Color3.fromRGB(255, 223, 0),
    Dark = Color3.fromRGB(15, 25, 22),
    Light = Color3.fromRGB(170, 255, 236),
    Danger = Color3.fromRGB(255, 80, 80),
    Success = Color3.fromRGB(0, 255, 180),
    Elite = Color3.fromRGB(180, 70, 255),
    Background = Color3.fromRGB(20, 30, 27),
    Panel = Color3.fromRGB(25, 40, 35),
    ThermalHot = Color3.fromRGB(255, 100, 70),  -- Warmer red-orange for thermal
    ThermalCold = Color3.fromRGB(50, 30, 100)   -- Deep purple-blue for thermal
}

-- FOV Circle with premium effects
local FOVCircle = Drawing.new("Circle")
FOVCircle.Position = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
FOVCircle.Radius = Settings.FOV.Radius
FOVCircle.Filled = Settings.FOV.Filled
FOVCircle.Color = PremiumColors.Primary
FOVCircle.Visible = Settings.FOV.Visible
FOVCircle.Transparency = Settings.FOV.Transparency
FOVCircle.NumSides = Settings.FOV.Sides
FOVCircle.Thickness = Settings.FOV.Thickness

-- Premium Target Indicator with animation
local TargetIndicator = Drawing.new("Circle")
TargetIndicator.Visible = false
TargetIndicator.Radius = 12
TargetIndicator.Filled = true
TargetIndicator.Color = PremiumColors.Accent
TargetIndicator.Transparency = 0.6
TargetIndicator.Thickness = 2

-- Elite target lock indicator
local LockIndicator = Drawing.new("Circle")
LockIndicator.Visible = false
LockIndicator.Radius = 18
LockIndicator.Filled = false
LockIndicator.Color = PremiumColors.Elite
LockIndicator.Transparency = 0.8
LockIndicator.Thickness = 3

-- Performance Optimization
local cachedPlayers = {}
local lastPlayerUpdate = 0
local playerUpdateInterval = 1

-- Initialize vision effects
local function InitializeVisionEffects()
    -- Thermal vision effect
    thermalEffect.Name = "VenomThermalEffect"
    thermalEffect.Saturation = -0.7  -- Reduced saturation for better contrast
    thermalEffect.Contrast = 1.2     -- Reduced contrast for eye comfort
    thermalEffect.TintColor = Settings.ThermalVision.AmbientColor  -- Deep red tint for eye comfort
    thermalEffect.Enabled = false
    thermalEffect.Parent = Lighting

    -- Night vision effect
    nightVisionEffect.Name = "VenomNightVisionEffect"
    nightVisionEffect.Saturation = -0.3  -- Less saturation for natural look
    nightVisionEffect.Contrast = Settings.NightVision.Contrast
    nightVisionEffect.Brightness = Settings.NightVision.Brightness
    nightVisionEffect.TintColor = Settings.NightVision.Color
    nightVisionEffect.Enabled = false
    nightVisionEffect.Parent = Lighting

    -- Bloom effect for night vision
    bloomEffect.Name = "VenomBloomEffect"
    bloomEffect.Intensity = 0.4      -- Reduced intensity for performance
    bloomEffect.Size = 24            -- Smaller size for performance
    bloomEffect.Threshold = 0.8      -- Higher threshold to reduce over-bloom
    bloomEffect.Enabled = false
    bloomEffect.Parent = Lighting
end

-- Create thermal highlights for players
local function CreateThermalHighlights()
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character then
            local highlight = Instance.new("Highlight")
            highlight.Name = "VenomThermalHighlight"
            highlight.FillColor = Settings.ThermalVision.HotColor
            highlight.OutlineColor = Color3.fromRGB(255, 70, 40)  -- Brighter outline
            highlight.FillTransparency = 0.2  -- More visible
            highlight.OutlineTransparency = 0
            highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
            highlight.Enabled = false
            highlight.Parent = player.Character
            thermalHighlights[player] = highlight
        end
    end
end

-- Toggle thermal vision
local function ToggleThermalVision(state)
    Settings.ThermalVision.Enabled = state
    thermalEffect.Enabled = state
    
    if state then
        -- Disable night vision if thermal is enabled
        if Settings.NightVision.Enabled then
            ToggleNightVision(false)
        end
        
        -- Enable thermal highlights with better visibility
        for player, highlight in pairs(thermalHighlights) do
            if player and player.Character and highlight then
                highlight.Enabled = true
                highlight.FillColor = Settings.ThermalVision.HotColor
                highlight.OutlineColor = Color3.fromRGB(255, 70, 40)
            end
        end
        
        -- Apply thermal vision lighting with eye comfort colors
        Lighting.Ambient = Settings.ThermalVision.AmbientColor  -- Deep red for eye comfort
        Lighting.OutdoorAmbient = Settings.ThermalVision.AmbientColor
        Lighting.ColorShift_Bottom = Settings.ThermalVision.ColdColor
        Lighting.ColorShift_Top = Settings.ThermalVision.HotColor
        Lighting.Brightness = 0.9  -- Slightly brighter for better visibility
        
        -- Add a subtle yellow/amber filter for haze reduction
        local amberFilter = Instance.new("ColorCorrectionEffect")
        amberFilter.Name = "VenomAmberFilter"
        amberFilter.TintColor = Color3.fromRGB(255, 220, 180)  -- Warm amber
        amberFilter.Saturation = -0.1
        amberFilter.Contrast = 0.1
        amberFilter.Brightness = 0.05
        amberFilter.Parent = Lighting
    else
        -- Disable thermal highlights
        for player, highlight in pairs(thermalHighlights) do
            if highlight then
                highlight.Enabled = false
            end
        end
        
        -- Remove amber filter
        local amberFilter = Lighting:FindFirstChild("VenomAmberFilter")
        if amberFilter then
            amberFilter:Destroy()
        end
        
        -- Restore default lighting
        Lighting.Ambient = Color3.fromRGB(127, 127, 127)
        Lighting.OutdoorAmbient = Color3.fromRGB(127, 127, 127)
        Lighting.ColorShift_Bottom = Color3.fromRGB(0, 0, 0)
        Lighting.ColorShift_Top = Color3.fromRGB(0, 0, 0)
        Lighting.Brightness = 1
    end
end

-- Toggle night vision
local function ToggleNightVision(state)
    Settings.NightVision.Enabled = state
    nightVisionEffect.Enabled = state
    bloomEffect.Enabled = state
    
    if state then
        -- Disable thermal vision if night vision is enabled
        if Settings.ThermalVision.Enabled then
            ToggleThermalVision(false)
        end
        
        -- Apply night vision settings (optimized for performance)
        Lighting.Ambient = Color3.fromRGB(30, 60, 30)  -- Dark green ambient
        Lighting.OutdoorAmbient = Color3.fromRGB(30, 60, 30)
        Lighting.FogColor = Color3.fromRGB(0, 30, 0)
        Lighting.FogEnd = 1200  -- Reduced fog end for performance
        Lighting.Brightness = 0.7  -- Balanced brightness
        Lighting.GlobalShadows = false  -- Disable shadows for performance
        
        -- Add yellow filter for better contrast in low light
        local yellowFilter = Instance.new("ColorCorrectionEffect")
        yellowFilter.Name = "VenomYellowFilter"
        yellowFilter.TintColor = Color3.fromRGB(255, 240, 180)  -- Soft yellow
        yellowFilter.Saturation = -0.1
        yellowFilter.Contrast = 0.2
        yellowFilter.Brightness = 0.1
        yellowFilter.Parent = Lighting
    else
        -- Remove yellow filter
        local yellowFilter = Lighting:FindFirstChild("VenomYellowFilter")
        if yellowFilter then
            yellowFilter:Destroy()
        end
        
        -- Restore default lighting
        Lighting.Ambient = Color3.fromRGB(127, 127, 127)
        Lighting.OutdoorAmbient = Color3.fromRGB(127, 127, 127)
        Lighting.FogColor = Color3.fromRGB(191, 191, 191)
        Lighting.FogEnd = 10000
        Lighting.Brightness = 1
        Lighting.GlobalShadows = true
    end
end

-- Calculate player accuracy
local function CalculatePlayerAccuracy()
    if playstyleMetrics.accuracyStats.shotsFired == 0 then
        return 0.5
    end
    
    local accuracy = playstyleMetrics.accuracyStats.shotsHit / playstyleMetrics.accuracyStats.shotsFired
    return math.clamp(accuracy, 0.1, 0.95)
end

-- Track accuracy when targets are hit
local function TrackAccuracy(hit)
    local currentTime = tick()
    
    playstyleMetrics.accuracyStats.shotsFired = playstyleMetrics.accuracyStats.shotsFired + 1
    
    if hit then
        playstyleMetrics.accuracyStats.shotsHit = playstyleMetrics.accuracyStats.shotsHit + 1
    end
    
    if currentTime - playstyleMetrics.accuracyStats.lastAccuracyUpdate > 30 then
        playstyleMetrics.accuracyStats.shotsFired = playstyleMetrics.accuracyStats.shotsFired * 0.5
        playstyleMetrics.accuracyStats.shotsHit = playstyleMetrics.accuracyStats.shotsHit * 0.5
        playstyleMetrics.accuracyStats.lastAccuracyUpdate = currentTime
    end
end

-- REALISTIC Playstyle Detection System
local function UpdatePlaystyleMetrics()
    local currentTime = tick()
    local character = LocalPlayer.Character
    
    if currentTime - playstyleMetrics.lastDetectionUpdate > 0.5 then
        if character then
            local rootPart = character:FindFirstChild("HumanoidRootPart")
            if rootPart then
                local speed = rootPart.Velocity.Magnitude
                
                if speed < 2 then
                    playstyleMetrics.movementPattern = "stationary"
                    playstyleMetrics.detectionLevel = math.max(0, playstyleMetrics.detectionLevel - 0.05)
                elseif speed < 10 then
                    playstyleMetrics.movementPattern = "walking"
                    playstyleMetrics.detectionLevel = math.min(1, playstyleMetrics.detectionLevel + 0.01)
                else
                    playstyleMetrics.movementPattern = "running"
                    playstyleMetrics.detectionLevel = math.min(1, playstyleMetrics.detectionLevel + 0.04)
                end
                
                playstyleMetrics.lastMovementUpdate = currentTime
            end
        end
        
        playstyleMetrics.lastDetectionUpdate = currentTime
    end
    
    local timeSinceCombat = currentTime - playstyleMetrics.lastCombatTime
    local timeSinceLastShot = currentTime - playstyleMetrics.lastShotTime
    
    local isInCombat = false
    
    if timeSinceLastShot < 2 or timeSinceCombat < 2 then
        isInCombat = true
        playstyleMetrics.combatActions = playstyleMetrics.combatActions + 1
    end
    
    if Holding and Target and currentTime - targetLockTime > 1.5 then
        isInCombat = true
        playstyleMetrics.detectionLevel = math.min(1, playstyleMetrics.detectionLevel + 0.05)
    end
    
    if playstyleMetrics.combatActions > 3 and timeSinceCombat < 5 then
        isInCombat = true
    end
    
    if currentTime % 5 < 0.1 then
        playstyleMetrics.combatActions = math.max(0, playstyleMetrics.combatActions - 1)
    end
    
    playstyleMetrics.isStealthMode = not isInCombat and 
        playstyleMetrics.detectionLevel < Settings.PlaystyleAdaptation.DetectionThreshold
    
    if Target and currentTime - lastTargetSwitch < 2 then
        local switchWeight = 0.1
        playstyleMetrics.targetSwitchFrequency = playstyleMetrics.targetSwitchFrequency * (1 - switchWeight) + switchWeight
    else
        playstyleMetrics.targetSwitchFrequency = playstyleMetrics.targetSwitchFrequency * 0.99
    end
end

-- Enhanced playstyle adaptation with realistic threat assessment
local function ApplyPlaystyleAdaptation(threatScore, player, isVisible, distance)
    if not Settings.PlaystyleAdaptation.Enabled then return threatScore end
    
    UpdatePlaystyleMetrics()
    
    if playstyleMetrics.isStealthMode then
        if not isVisible or distance > 100 then
            threatScore = threatScore + Settings.PlaystyleAdaptation.StealthEngagementBonus
        end
        
        local character = player.Character
        if character then
            local head = character:FindFirstChild("Head")
            local rootPart = character:FindFirstChild("HumanoidRootPart")
            local localRoot = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
            
            if head and rootPart and localRoot then
                local directionToPlayer = (localRoot.Position - rootPart.Position).Unit
                local lookDirection = head.CFrame.LookVector
                local dotProduct = directionToPlayer:Dot(lookDirection)
                
                if dotProduct > 0.8 then
                    threatScore = threatScore * 1.3
                    playstyleMetrics.detectionLevel = math.min(1, playstyleMetrics.detectionLevel + 0.1)
                end
            end
        end
    else
        if threatScore > Settings.PlaystyleAdaptation.AggressionThreshold then
            threatScore = threatScore * 1.2
        end
        
        if combatEvents[player] and combatEvents[player].Time > tick() - 2 then
            threatScore = threatScore + 40
        end
    end
    
    if distance < Settings.PlaystyleAdaptation.MinEngagementDistance then
        threatScore = threatScore + Settings.PlaystyleAdaptation.CloseQuartersBonus
    elseif distance > Settings.PlaystyleAdaptation.MaxEngagementDistance then
        threatScore = threatScore - Settings.PlaystyleAdaptation.LongRangePenalty
    end
    
    if Settings.PlaystyleAdaptation.AccuracyBasedAdaptation then
        local accuracyFactor = CalculatePlayerAccuracy()
        threatScore = threatScore * (0.8 + accuracyFactor * 0.4)
    end
    
    if playstyleMetrics.preferredTargets[player] then
        local preferenceBonus = playstyleMetrics.preferredTargets[player] * 0.5
        threatScore = threatScore + preferenceBonus
    end
    
    return threatScore
end

-- Advanced Adaptive FOV System
local function UpdateAdaptiveFOV()
    if not Settings.DynamicFOV or not Settings.DynamicFOVSettings.Enabled then 
        FOVCircle.Radius = Settings.FOV.Radius
        return 
    end
    
    local targetFOV = Settings.DynamicFOVSettings.BaseFOV
    
    if Settings.DynamicFOVSettings.PerformanceScaling then
        local fpsFactor = math.clamp(currentFPS / 60, 0.5, 1.5)
        targetFOV = targetFOV * fpsFactor
    end
    
    if Settings.DynamicFOVSettings.EngagementScaling and playstyleMetrics.averageEngagementDistance > 0 then
        local distanceFactor = math.clamp(playstyleMetrics.averageEngagementDistance / 100, 0.7, 1.5)
        targetFOV = targetFOV * distanceFactor
    end
    
    if playstyleMetrics.isStealthMode then
        targetFOV = Settings.DynamicFOVSettings.StealthFOV
    else
        targetFOV = Settings.DynamicFOVSettings.CombatFOV
    end
    
    targetFOV = math.clamp(targetFOV, Settings.DynamicFOVSettings.MinFOV, Settings.DynamicFOVSettings.MaxFOV)
    
    local smoothness = Settings.DynamicFOVSettings.TransitionSmoothness or 0.1
    FOVCircle.Radius = FOVCircle.Radius + (targetFOV - FOVCircle.Radius) * smoothness
end

-- Improved Prediction Engine
local function CalculatePrediction(targetChar, aimPart)
    if not Settings.Prediction.Enabled then return aimPart.Position end
    
    local humanoidRootPart = targetChar:FindFirstChild("HumanoidRootPart")
    if not humanoidRootPart then return aimPart.Position end
    
    local velocity = humanoidRootPart.Velocity
    local distance = (aimPart.Position - Camera.CFrame.Position).Magnitude
    
    local travelTime = distance / 1200
    
    local predictedPos = aimPart.Position + velocity * travelTime * Settings.Prediction.Strength
    
    predictedPos = predictedPos + Vector3.new(0, Settings.Prediction.VerticalAdjustment, 0)
    
    return predictedPos
end

-- Enhanced body part selection with improved hit probability
local function GetRandomizedAimPart(character)
    if not Settings.Humanizer.Enabled or math.random() > Settings.Humanizer.BodyPartRandomization then
        return character:FindFirstChild(Settings.AimPart) or character:FindFirstChild("Head")
    end
    
    local parts = {
        {Name = "Head", Weight = 45, Offset = Vector3.new(0, -0.2, 0)},
        {Name = "UpperTorso", Weight = 30, Offset = Vector3.new(0, 0.3, 0)},
        {Name = "HumanoidRootPart", Weight = 15, Offset = Vector3.new(0, 0, 0)},
        {Name = "LowerTorso", Weight = 10, Offset = Vector3.new(0, 0, 0)}
    }
    
    local totalWeight = 0
    for _, partData in ipairs(parts) do
        if character:FindFirstChild(partData.Name) then
            totalWeight = totalWeight + partData.Weight
        end
    end
    
    local randomValue = math.random(1, totalWeight)
    local cumulativeWeight = 0
    
    for _, partData in ipairs(parts) do
        local part = character:FindFirstChild(partData.Name)
        if part then
            cumulativeWeight = cumulativeWeight + partData.Weight
            if randomValue <= cumulativeWeight then
                return part, partData.Offset
            end
        end
    end
    
    return character:FindFirstChild("Head") or character:FindFirstChild("UpperTorso"), Vector3.new(0, -0.2, 0)
end

-- Enhanced Humanizer with improved aiming logic
local function ApplyHumanizer(targetPosition, currentTime, targetChar, aimPart)
    if not Settings.Humanizer.Enabled then return targetPosition end
    
    if currentTime - lastHumanizerUpdate < 0.05 then return targetPosition end
    lastHumanizerUpdate = currentTime
    
    if Settings.Humanizer.MissChance > 0 and currentTime - lastMissTime > Settings.Humanizer.MissCooldown then
        if math.random() < Settings.Humanizer.MissChance then
            lastMissTime = currentTime
            local missOffset = Vector3.new(
                (math.random() - 0.5) * 4,  -- Reduced miss offset for better accuracy
                (math.random() - 0.5) * 4,
                (math.random() - 0.5) * 2
            )
            TrackAccuracy(false)
            return targetPosition + missOffset
        end
    end
    
    if aimPart and aimPart.Name == "Head" then
        targetPosition = targetPosition - Vector3.new(0, math.random() * 0.3 + 0.1, 0)  -- Reduced head offset
    elseif aimPart and aimPart.Name == "UpperTorso" then
        targetPosition = targetPosition + Vector3.new(0, math.random() * 0.2 - 0.1, 0)  -- Reduced torso offset
    end
    
    local sineWave = math.sin(currentTime * 5) * Settings.Humanizer.Intensity * 0.2  -- Reduced sine wave
    local cosineWave = math.cos(currentTime * 4) * Settings.Humanizer.Intensity * 0.15  -- Reduced cosine wave
    
    local microShake = Vector3.new(
        (math.random() - 0.5 + sineWave) * Settings.Humanizer.Intensity * 0.3,  -- Reduced microshake
        (math.random() - 0.5 + cosineWave) * Settings.Humanizer.Intensity * 0.3,
        (math.random() - 0.5) * Settings.Humanizer.Intensity * 0.15
    )
    
    TrackAccuracy(true)
    return targetPosition + microShake
end

-- Optimized Visibility Check
local function IsVisible(character)
    if not Settings.VisibilityCheck then return true end
    
    local aimPart = character:FindFirstChild(Settings.AimPart) or character:FindFirstChild("Head")
    if not aimPart then return false end
    
    local origin = Camera.CFrame.Position
    local destination = aimPart.Position
    local direction = (destination - origin).Unit
    
    local raycastParams = RaycastParams.new()
    raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
    raycastParams.FilterDescendantsInstances = {LocalPlayer.Character, Camera}
    raycastParams.IgnoreWater = true
    
    local result = workspace:Raycast(origin, direction * Settings.MaxDistance, raycastParams)
    
    if result and result.Instance then
        local hitModel = result.Instance:FindFirstAncestorWhichIsA("Model")
        return hitModel == character
    end
    
    return false
end

-- Efficient Player Cache System
local function UpdatePlayerCache()
    if tick() - lastPlayerUpdate < playerUpdateInterval then return end
    
    cachedPlayers = {}
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character then
            table.insert(cachedPlayers, player)
        end
    end
    
    lastPlayerUpdate = tick()
end

-- Track combat events for threat assessment
local function RecordCombatEvent(attacker, damage)
    local currentTime = tick()
    combatEvents[attacker] = {
        Time = currentTime,
        Damage = damage,
        ThreatLevel = math.min(100, damage * 2)
    }
    
    playstyleMetrics.lastCombatTime = currentTime
    playstyleMetrics.combatActions = playstyleMetrics.combatActions + 2
end

-- Clean up old combat events
local function CleanCombatEvents()
    local currentTime = tick()
    for attacker, event in pairs(combatEvents) do
        if currentTime - event.Time > Settings.RecentCombatMemory then
            combatEvents[attacker] = nil
        end
    end
end

-- Advanced threat evaluation system - FIXED SCORING
local function EvaluateThreatLevel(player)
    local character = player.Character
    if not character then return 0 end
    
    local threatScore = 0
    local rootPart = character:FindFirstChild("HumanoidRootPart")
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    
    if not rootPart or not humanoid or humanoid.Health <= 0 then return 0 end
    
    -- Distance factor (closer = more threat) - FIXED: Reduced scaling
    local distance = (rootPart.Position - Camera.CFrame.Position).Magnitude
    threatScore = threatScore + (1000 / math.max(1, distance))  -- Reduced from 2000
    
    -- EXTREME priority for very close targets - FIXED: Reduced bonus
    if distance < 25 then
        threatScore = threatScore + Settings.CloseRangePriority
    end
    
    -- Visibility bonus (HIGH priority) - FIXED: Reduced bonus
    local isVisible = IsVisible(character)
    if isVisible then
        threatScore = threatScore + Settings.VisibleTargetBonus
        
        local head = character:FindFirstChild("Head")
        if head then
            local directionToPlayer = (Camera.CFrame.Position - rootPart.Position).Unit
            local lookDirection = head.CFrame.LookVector
            local dotProduct = directionToPlayer:Dot(lookDirection)
            
            if dotProduct > 0.7 then
                threatScore = threatScore + Settings.FacingPlayerBonus
                
                if distance < 35 and dotProduct > 0.9 then
                    threatScore = threatScore + Settings.ImmediateThreatBonus
                end
            end
        end
    elseif distance > 150 then
        threatScore = threatScore * 0.6
    end
    
    -- High ground advantage/disadvantage - FIXED: Reduced bonus
    local localRoot = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
    if localRoot then
        local elevationDifference = rootPart.Position.Y - localRoot.Position.Y
        if elevationDifference > 5 then
            threatScore = threatScore + Settings.HighGroundBonus
        elseif elevationDifference < -5 then
            threatScore = threatScore - 5  -- Reduced penalty
        end
    end
    
    -- Weapon detection with multiplier - FIXED: Reduced multiplier
    local tool = character:FindFirstChildOfClass("Tool")
    if tool then
        threatScore = threatScore * Settings.WeaponThreatMultiplier
    end
    
    -- Recent combat events (damage dealt to you) - FIXED: Reduced threat level
    CleanCombatEvents()
    if combatEvents[player] then
        threatScore = threatScore + combatEvents[player].ThreatLevel
    end
    
    -- Movement-based threat reduction
    local speed = rootPart.Velocity.Magnitude
    if speed < 2 then
        threatScore = threatScore * Settings.MovementThreatFactor
    end
    
    -- Recent target memory - FIXED: Reduced bonus
    local currentTime = tick()
    if recentTargets[player] then
        local timeSinceLastSeen = currentTime - recentTargets[player]
        if timeSinceLastSeen < Settings.RecentTargetMemory then
            threatScore = threatScore + (20 * (1 - timeSinceLastSeen / Settings.RecentTargetMemory))  -- Reduced from 40
        end
    end
    
    -- Health-based threat
    local healthPercent = humanoid.Health / humanoid.MaxHealth
    threatScore = threatScore * (0.5 + healthPercent * 0.5)
    
    -- Apply playstyle adaptation
    threatScore = ApplyPlaystyleAdaptation(threatScore, player, isVisible, distance)
    
    -- CAP THE THREAT SCORE TO MAX 100
    return math.clamp(math.max(0, threatScore), 0, 100)
end

-- Enhanced target selection with smart switching - FIXED TERRAIN ISSUE
local function FindOptimalTarget()
    UpdatePlayerCache()
    
    local bestTarget = nil
    local highestThreat = -1
    local currentTime = tick()
    
    for player, lastSeen in pairs(recentTargets) do
        if currentTime - lastSeen > Settings.RecentTargetMemory then
            recentTargets[player] = nil
        end
    end
    
    if Target and Target.Character and currentTime - targetLockTime < Settings.SmartSwitch.TargetLockDuration then
        local character = Target.Character
        local humanoid = character:FindFirstChildOfClass("Humanoid")
        local rootPart = character:FindFirstChild("HumanoidRootPart")
        
        if humanoid and humanoid.Health > 0 and rootPart then
            local distance = (rootPart.Position - Camera.CFrame.Position).Magnitude
            if distance <= Settings.MaxDistance and (not Settings.VisibilityCheck or IsVisible(character)) then
                return Target
            end
        end
    end
    
    local combatCooldownMultiplier = playstyleMetrics.isStealthMode and 1 or 2
    if currentTime - lastTargetSwitch < Settings.SmartSwitch.TargetSwitchCooldown * combatCooldownMultiplier and Target and Target.Character then
        local character = Target.Character
        local humanoid = character:FindFirstChildOfClass("Humanoid")
        local rootPart = character:FindFirstChild("HumanoidRootPart")
        
        if humanoid and humanoid.Health > 0 and rootPart then
            local distance = (rootPart.Position - Camera.CFrame.Position).Magnitude
            if distance <= Settings.MaxDistance and (not Settings.VisibilityCheck or IsVisible(character)) then
                return Target
            end
        end
    end
    
    local potentialTargets = {}
    
    for _, player in ipairs(cachedPlayers) do
        if Settings.TeamCheck and player.Team == LocalPlayer.Team then continue end
        
        local character = player.Character
        if not character then continue end
        
        local humanoid = character:FindFirstChildOfClass("Humanoid")
        if not humanoid or humanoid.Health <= 0 then continue end
        
        local rootPart = character:FindFirstChild("HumanoidRootPart")
        if not rootPart then continue end
        
        local distance = (rootPart.Position - Camera.CFrame.Position).Magnitude
        if distance > Settings.MaxDistance then continue end
        
        local isVisible = IsVisible(character)
        
        if isVisible then
            recentTargets[player] = currentTime
        elseif distance > 150 then
            continue
        end
        
        local threatLevel = EvaluateThreatLevel(player)
        
        table.insert(potentialTargets, {
            Player = player,
            Threat = threatLevel,
            Distance = distance,
            IsVisible = isVisible
        })
    end
    
    table.sort(potentialTargets, function(a, b)
        if a.IsVisible and not b.IsVisible and a.Threat > b.Threat * 0.7 then
            return true
        elseif b.IsVisible and not a.IsVisible and b.Threat > a.Threat * 0.7 then
            return false
        end
        
        return a.Threat > b.Threat
    end)
    
    if #potentialTargets > 0 then
        local topThreat = potentialTargets[1].Threat
        
        if Target and Target.Character then
            local currentThreat = EvaluateThreatLevel(Target)
            
            local minThreatDiff = playstyleMetrics.isStealthMode and 
                Settings.SmartSwitch.MinThreatDifference or 
                Settings.SmartSwitch.MinThreatDifference * 1.5
            
            if topThreat > currentThreat + minThreatDiff then
                bestTarget = potentialTargets[1].Player
                highestThreat = topThreat
            else
                bestTarget = Target
                highestThreat = currentThreat
            end
        else
            bestTarget = potentialTargets[1].Player
            highestThreat = topThreat
        end
    end
    
    if bestTarget and bestTarget ~= Target then
        lastTargetSwitch = currentTime
        targetLockTime = currentTime
        
        playstyleMetrics.recentTargets[bestTarget] = currentTime
        
        if not playstyleMetrics.preferredTargets[bestTarget] then
            playstyleMetrics.preferredTargets[bestTarget] = 0
        end
        playstyleMetrics.preferredTargets[bestTarget] = playstyleMetrics.preferredTargets[bestTarget] + 
            Settings.PlaystyleAdaptation.LearningRate
    end
    
    if threatLabel then
        if bestTarget then
            threatLabel.Text = "‚ö†Ô∏è Threat Level: " .. math.floor(highestThreat)
            
            if highestThreat > 80 then
                threatLabel.TextColor3 = PremiumColors.Danger
            elseif highestThreat > 60 then
                threatLabel.TextColor3 = Color3.fromRGB(255, 80, 80)
            elseif highestThreat > 40 then
                threatLabel.TextColor3 = Color3.fromRGB(255, 160, 0)
            elseif highestThreat > 20 then
                threatLabel.TextColor3 = PremiumColors.Accent
            elseif highestThreat > 10 then
                threatLabel.TextColor3 = PremiumColors.Light
            else
                threatLabel.TextColor3 = PremiumColors.Secondary
            end
        else
            threatLabel.Text = "‚ö†Ô∏è Threat Level: 0"
            threatLabel.TextColor3 = PremiumColors.Light
        end
    end
    
    return bestTarget
end

-- Smooth Aiming System
local function SmoothAim(targetPosition)
    local currentCFrame = Camera.CFrame
    local targetCFrame = CFrame.new(currentCFrame.Position, targetPosition)
    
    TweenService:Create(Camera, TweenInfo.new(Settings.Sensitivity, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {
        CFrame = targetCFrame
    }):Play()
end

-- Fixed Radar System with forward-facing orientation
local function CreateRadar()
    if radarFrame and radarFrame.Parent then
        radarFrame.Parent:Destroy()
    end
    
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "VenomRadar_" .. math.random(10000, 99999)
    screenGui.Parent = game.CoreGui
    screenGui.ResetOnSpawn = false
    screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    
    radarFrame = Instance.new("Frame")
    radarFrame.Size = UDim2.new(0, Settings.Radar.Size, 0, Settings.Radar.Size)
    radarFrame.Position = Settings.Radar.Position
    radarFrame.BackgroundColor3 = PremiumColors.Background
    radarFrame.BackgroundTransparency = Settings.Radar.BackgroundTransparency
    radarFrame.BorderSizePixel = 0
    radarFrame.Active = true
    radarFrame.Draggable = true
    
    local radarBorder = Instance.new("UIStroke")
    radarBorder.Color = PremiumColors.Primary
    radarBorder.Thickness = 2
    radarBorder.Parent = radarFrame
    
    local borderTween = TweenService:Create(radarBorder, TweenInfo.new(3, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut, -1, true), {
                Color = PremiumColors.Secondary
    })
    borderTween:Play()
    
    local radarCorner = Instance.new("UICorner")
    radarCorner.CornerRadius = UDim.new(1, 0)
    radarCorner.Parent = radarFrame
    
    local gridLines = {
        {From = UDim2.new(0.5, 0, 0, 0), To = UDim2.new(0.5, 0, 1, 0)},
        {From = UDim2.new(0, 0, 0.5, 0), To = UDim2.new(1, 0, 0.5, 0)},
    }
    
    for _, line in ipairs(gridLines) do
        local lineFrame = Instance.new("Frame")
        lineFrame.Size = UDim2.new(0, 1, 0, 1)
        lineFrame.Position = line.From
        lineFrame.AnchorPoint = Vector2.new(0.5, 0.5)
        lineFrame.BackgroundColor3 = PremiumColors.Primary
        lineFrame.BackgroundTransparency = 0.7
        lineFrame.BorderSizePixel = 0
        lineFrame.Parent = radarFrame
        
        local lineTween = TweenService:Create(lineFrame, TweenInfo.new(0.5), {
            Size = line.To
        })
        lineTween:Play()
    end
    
    local selfDot = Instance.new("Frame")
    selfDot.Size = UDim2.new(0, 6, 0, 6)
    selfDot.Position = UDim2.new(0.5, -3, 0.5, -3)
    selfDot.BackgroundColor3 = PremiumColors.Primary
    selfDot.BorderSizePixel = 0
    selfDot.ZIndex = 3
    selfDot.Parent = radarFrame
    
    local selfDotCorner = Instance.new("UICorner")
    selfDotCorner.CornerRadius = UDim.new(1, 0)
    selfDotCorner.Parent = selfDot
    
    local pulseTween = TweenService:Create(selfDot, TweenInfo.new(1, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut, -1, true), {
        Size = UDim2.new(0, 8, 0, 8),
        Position = UDim2.new(0.5, -4, 0.5, -4)
    })
    pulseTween:Play()
    
    local rangeLabel = Instance.new("TextLabel")
    rangeLabel.Size = UDim2.new(1, 0, 0, 15)
    rangeLabel.Position = UDim2.new(0, 0, 1, 5)
    rangeLabel.Text = "Range: " .. Settings.Radar.Range .. " studs"
    rangeLabel.BackgroundTransparency = 1
    rangeLabel.TextColor3 = PremiumColors.Light
    rangeLabel.Font = Enum.Font.GothamBold
    rangeLabel.TextSize = 10
    rangeLabel.TextXAlignment = Enum.TextXAlignment.Center
    rangeLabel.Parent = radarFrame
    
    radarFrame.Parent = screenGui
    return screenGui
end

local function UpdateRadar()
    if not Settings.Radar.Enabled or not radarFrame then return end
    
    local currentTime = tick()
    if currentTime - lastRadarUpdate < Settings.Radar.RefreshRate then return end
    lastRadarUpdate = currentTime
    
    for playerName, dot in pairs(radarDots) do
        if dot and dot.Parent then
            dot:Destroy()
        end
    end
    radarDots = {}
    
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character then
            local character = player.Character
            local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
            local humanoid = character:FindFirstChildOfClass("Humanoid")
            
            if humanoidRootPart and humanoid and humanoid.Health > 0 then
                local localRoot = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
                if not localRoot then continue end
                
                local position = humanoidRootPart.Position
                local localPosition = localRoot.Position
                
                local direction = position - localPosition
                local distance = direction.Magnitude
                
                if distance > Settings.Radar.Range then continue end
                
                local normalizedDistance = distance / Settings.Radar.Range
                
                local playerRotation = localRoot.CFrame - localRoot.CFrame.Position
                local forwardVector = playerRotation.LookVector
                
                local flatDirection = Vector3.new(direction.X, 0, direction.Z).Unit
                local flatForward = Vector3.new(forwardVector.X, 0, forwardVector.Z).Unit
                
                local angle = math.atan2(flatDirection.X, flatDirection.Z) - math.atan2(flatForward.X, flatForward.Z)
                
                local radarX = 0.5 + math.sin(angle) * normalizedDistance * 0.5
                local radarY = 0.5 - math.cos(angle) * normalizedDistance * 0.5
                
                local dot = Instance.new("Frame")
                dot.Size = UDim2.new(0, 8, 0, 8)
                dot.Position = UDim2.new(radarX, -4, radarY, -4)
                dot.AnchorPoint = Vector2.new(0.5, 0.5)
                dot.BorderSizePixel = 0
                dot.ZIndex = 2
                
                local threatLevel = EvaluateThreatLevel(player)
                local dotColor
                
                if threatLevel > 80 then
                    dotColor = PremiumColors.Danger
                elseif threatLevel > 60 then
                    dotColor = Color3.fromRGB(255, 80, 80)
                elseif threatLevel > 40 then
                    local ratio = (threatLevel - 40) / 20
                    dotColor = Color3.fromRGB(255, 160, 0):Lerp(Color3.fromRGB(255, 80, 80), ratio)
                elseif threatLevel > 20 then
                    local ratio = (threatLevel - 20) / 20
                    dotColor = PremiumColors.Accent:Lerp(Color3.fromRGB(255, 160, 0), ratio)
                elseif threatLevel > 10 then
                    local ratio = (threatLevel - 10) / 10
                    dotColor = PremiumColors.Light:Lerp(PremiumColors.Accent, ratio)
                else
                    dotColor = PremiumColors.Secondary
                end
                
                dot.BackgroundColor3 = dotColor
                
                local dotCorner = Instance.new("UICorner")
                dotCorner.CornerRadius = UDim.new(1, 0)
                dotCorner.Parent = dot
                
                if threatLevel > 60 then
                    local glow = Instance.new("UIStroke")
                    glow.Color = dotColor
                    glow.Thickness = 2
                    glow.Transparency = 0.5
                    glow.Parent = dot
                    
                    local glowTween = TweenService:Create(glow, TweenInfo.new(0.8, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut, -1, true), {
                        Thickness = 3
                    })
                    glowTween:Play()
                end
                
                local tooltip = Instance.new("TextLabel")
                tooltip.Size = UDim2.new(0, 0, 0, 0)
                tooltip.Position = UDim2.new(0.5, 0, 0, -15)
                tooltip.Text = player.Name
                tooltip.BackgroundTransparency = 1
                tooltip.TextColor3 = PremiumColors.Light
                tooltip.Font = Enum.Font.GothamBold
                tooltip.TextSize = 10
                tooltip.TextXAlignment = Enum.TextXAlignment.Center
                tooltip.Visible = false
                tooltip.Parent = dot
                
                dot.MouseEnter:Connect(function()
                    tooltip.Size = UDim2.new(0, 60, 0, 15)
                    tooltip.Position = UDim2.new(0.5, -30, 0, -18)
                    tooltip.Visible = true
                end)
                
                dot.MouseLeave:Connect(function()
                    tooltip.Visible = false
                end)
                
                dot.Parent = radarFrame
                radarDots[player.Name] = dot
            end
        end
    end
end

-- Input Handling
UserInputService.InputBegan:Connect(function(input)
    if input.UserInputType == Settings.AimKey then
        Holding = true
        if Settings.FOVChangeOnAim then
            FOVCircle.Radius = Settings.FOV.Radius * 0.6
        end
    end
    
    if input.KeyCode == Settings.ToggleKey then
        Settings.Enabled = not Settings.Enabled
        UpdateUI()
    end
end)

UserInputService.InputEnded:Connect(function(input)
    if input.UserInputType == Settings.AimKey then
        Holding = false
        TargetIndicator.Visible = false
        LockIndicator.Visible = false
        if Settings.FOVChangeOnAim then
            FOVCircle.Radius = Settings.FOV.Radius
        end
    end
end)

-- Track damage taken for threat assessment
local function TrackDamage()
    local character = LocalPlayer.Character
    if not character then return end
    
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if not humanoid then return end
    
    humanoid.HealthChanged:Connect(function()
        if humanoid.Health < humanoid.MaxHealth then
            for _, player in ipairs(Players:GetPlayers()) do
                if player ~= LocalPlayer and player.Character then
                    local tool = player.Character:FindFirstChildOfClass("Tool")
                    if tool then
                        RecordCombatEvent(player, humanoid.MaxHealth - humanoid.Health)
                        lastDamageTaken = tick()
                        damageSource = player
                        break
                    end
                end
            end
        end
    end)
end

-- Track when player fires a weapon
local function TrackWeaponFire()
    local character = LocalPlayer.Character
    if not character then return end
    
    character.ChildAdded:Connect(function(child)
        if child:IsA("Tool") then
            child.Activated:Connect(function()
                playstyleMetrics.lastShotTime = tick()
                playstyleMetrics.lastCombatTime = tick()
                playstyleMetrics.combatActions = playstyleMetrics.combatActions + 1
            end)
        end
    end)
end

-- Premium UI with scrolling frame for buttons
local function CreatePremiumUI()
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "VenomReptilePremiumUI_" .. math.random(10000, 99999)
    screenGui.Parent = game.CoreGui
    screenGui.ResetOnSpawn = false
    screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

    local mainFrame = Instance.new("Frame")
    mainFrame.Size = UDim2.new(0, 320, 0, 450)
    mainFrame.Position = UDim2.new(0, 10, 0, 10)
    mainFrame.BackgroundColor3 = PremiumColors.Background
    mainFrame.BorderSizePixel = 0
    mainFrame.Active = true
    mainFrame.Draggable = true

    local pattern = Instance.new("ImageLabel")
    pattern.Size = UDim2.new(1, 0, 1, 0)
    pattern.Position = UDim2.new(0, 0, 0, 0)
    pattern.Image = "rbxassetid://11543912338"
    pattern.ImageTransparency = 0.1
    pattern.ScaleType = Enum.ScaleType.Tile
    pattern.TileSize = UDim2.new(0, 100, 0, 100)
    pattern.BackgroundTransparency = 1
    pattern.Parent = mainFrame

    local borderGlow = Instance.new("Frame")
    borderGlow.Size = UDim2.new(1, 6, 1, 6)
    borderGlow.Position = UDim2.new(0, -3, 0, -3)
    borderGlow.BackgroundColor3 = PremiumColors.Primary
    borderGlow.BorderSizePixel = 0
    borderGlow.ZIndex = 0
    
    local glowCorner = Instance.new("UICorner")
    glowCorner.CornerRadius = UDim.new(0, 12)
    glowCorner.Parent = borderGlow
    
    local glowGradient = Instance.new("UIGradient")
    glowGradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, PremiumColors.Primary),
        ColorSequenceKeypoint.new(1, PremiumColors.Secondary)
    })
    glowGradient.Rotation = 45
    glowGradient.Parent = borderGlow
    
    local glowTween = TweenService:Create(glowGradient, TweenInfo.new(2, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut, -1, true), {
        Rotation = 405
    })
    glowTween:Play()

    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 10)
    corner.Parent = mainFrame

    local titleBar = Instance.new("Frame")
    titleBar.Size = UDim2.new(1, 0, 0, 40)
    titleBar.Position = UDim2.new(0, 0, 0, 0)
    titleBar.BackgroundColor3 = PremiumColors.Primary
    titleBar.BorderSizePixel = 0
    titleBar.ZIndex = 2

    local titlePattern = Instance.new("ImageLabel")
    titlePattern.Size = UDim2.new(1, 0, 1, 0)
    titlePattern.Image = "rbxassetid://11543914562"
    titlePattern.ImageTransparency = 0.2
    titlePattern.ScaleType = Enum.ScaleType.Tile
    titlePattern.TileSize = UDim2.new(0, 50, 0, 50)
    titlePattern.BackgroundTransparency = 1
    titlePattern.Parent = titleBar

    local titleCorner = Instance.new("UICorner")
    titleCorner.CornerRadius = UDim.new(0, 10)
    titleCorner.Parent = titleBar

    local title = Instance.new("TextLabel")
    title.Size = UDim2.new(1, -40, 1, 0)
    title.Position = UDim2.new(0, 15, 0, 0)
    title.Text = "üêç VENOM REPTILE v8.3 STEALTH"
    title.BackgroundTransparency = 1
    title.TextColor3 = Color3.fromRGB(255, 255, 255)
    title.Font = Enum.Font.GothamBlack
    title.TextSize = 16
    title.TextXAlignment = Enum.TextXAlignment.Left
    title.ZIndex = 3

    local statusLight = Instance.new("Frame")
    statusLight.Size = UDim2.new(0, 10, 0, 10)
    statusLight.Position = UDim2.new(1, -25, 0.5, -5)
    statusLight.BackgroundColor3 = PremiumColors.Success
    statusLight.BorderSizePixel = 0
    statusLight.ZIndex = 3

    local statusCorner = Instance.new("UICorner")
    statusCorner.CornerRadius = UDim.new(1, 0)
    statusCorner.Parent = statusLight

    local pulseTween = TweenService:Create(statusLight, TweenInfo.new(0.8, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut, -1, true), {
        Size = UDim2.new(0, 12, 0, 12),
        Position = UDim2.new(1, -26, 0.5, -6)
    })
    pulseTween:Play()

    local scrollFrame = Instance.new("ScrollingFrame")
    scrollFrame.Size = UDim2.new(1, 0, 1, -240)
    scrollFrame.Position = UDim2.new(0, 0, 0, 40)
    scrollFrame.BackgroundTransparency = 1
    scrollFrame.BorderSizePixel = 0
    scrollFrame.ScrollBarThickness = 4
    scrollFrame.ScrollBarImageColor3 = PremiumColors.Primary
    scrollFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
    scrollFrame.AutomaticCanvasSize = Enum.AutomaticSize.Y

    local buttons = {
        {Name = "Toggle", Text = "TOGGLE AIMBOT (F)", Key = "Enabled", OnColor = PremiumColors.Primary, OffColor = PremiumColors.Danger},
        {Name = "Prediction", Text = "PREDICTION", Key = "Prediction.Enabled", OnColor = PremiumColors.Secondary, OffColor = Color3.fromRGB(60, 60, 60)},
        {Name = "WallCheck", Text = "WALL CHECK", Key = "VisibilityCheck", OnColor = PremiumColors.Accent, OffColor = Color3.fromRGB(60, 60, 60)},
        {Name = "TeamCheck", Text = "TEAM CHECK", Key = "TeamCheck", OnColor = PremiumColors.Light, OffColor = Color3.fromRGB(60, 60, 60)},
        {Name = "Humanizer", Text = "BODY RANDOMIZER", Key = "Humanizer.Enabled", OnColor = PremiumColors.Success, OffColor = Color3.fromRGB(60, 60, 60)},
        {Name = "SmartSwitch", Text = "SMART SWITCH", Key = "SmartSwitch.Enabled", OnColor = PremiumColors.Elite, OffColor = Color3.fromRGB(60, 60, 60)},
        {Name = "Radar", Text = "RADAR SYSTEM", Key = "Radar.Enabled", OnColor = Color3.fromRGB(0, 180, 255), OffColor = Color3.fromRGB(60, 60, 60)},
        {Name = "Adaptation", Text = "PLAYSTYLE ADAPTATION", Key = "PlaystyleAdaptation.Enabled", OnColor = Color3.fromRGB(0, 200, 200), OffColor = Color3.fromRGB(60, 60, 60)},
        {Name = "DynamicFOV", Text = "ADAPTIVE FOV", Key = "DynamicFOVSettings.Enabled", OnColor = Color3.fromRGB(100, 200, 255), OffColor = Color3.fromRGB(60, 60, 60)},
        {Name = "ThermalVision", Text = "THERMAL VISION", Key = "ThermalVision.Enabled", OnColor = PremiumColors.ThermalHot, OffColor = Color3.fromRGB(60, 60, 60)},
        {Name = "NightVision", Text = "NIGHT VISION", Key = "NightVision.Enabled", OnColor = Settings.NightVision.Color, OffColor = Color3.fromRGB(60, 60, 60)}
    }

    local buttonInstances = {}
    local yOffset = 5

    for i, btn in ipairs(buttons) do
        local buttonContainer = Instance.new("Frame")
        buttonContainer.Size = UDim2.new(0.9, 0, 0, 40)
        buttonContainer.Position = UDim2.new(0.05, 0, 0, yOffset)
        buttonContainer.BackgroundTransparency = 1
        
        local button = Instance.new("TextButton")
        button.Size = UDim2.new(1, 0, 1, 0)
        button.Text = btn.Text
        button.BackgroundColor3 = Settings.Enabled and btn.OnColor or btn.OffColor
        button.TextColor3 = Color3.fromRGB(255, 255, 255)
        button.Font = Enum.Font.GothamBold
        button.TextSize = 12
        button.AutoButtonColor = false
        
        local buttonCorner = Instance.new("UICorner")
        buttonCorner.CornerRadius = UDim.new(0, 8)
        buttonCorner.Parent = button

        local buttonGradient = Instance.new("UIGradient")
        buttonGradient.Color = ColorSequence.new({
            ColorSequenceKeypoint.new(0, btn.OnColor),
            ColorSequenceKeypoint.new(1, btn.OnColor:Lerp(Color3.fromRGB(255, 255, 255), 0.1))
        })
        buttonGradient.Rotation = 90
        buttonGradient.Parent = button

        local buttonPattern = Instance.new("ImageLabel")
        buttonPattern.Size = UDim2.new(1, 0, 1, 0)
        buttonPattern.Image = "rbxassetid://11543917824"
        buttonPattern.ImageTransparency = 0.8
        buttonPattern.BackgroundTransparency = 1
        buttonPattern.Parent = button

        local buttonGlow = Instance.new("Frame")
        buttonGlow.Size = UDim2.new(1, 6, 1, 6)
        buttonGlow.Position = UDim2.new(0, -3, 0, -3)
        buttonGlow.BackgroundColor3 = btn.OnColor
        buttonGlow.BorderSizePixel = 0
        buttonGlow.ZIndex = -1
        buttonGlow.Visible = false
        
        local glowCorner = Instance.new("UICorner")
        glowCorner.CornerRadius = UDim.new(0, 10)
        glowCorner.Parent = buttonGlow
        
        buttonGlow.Parent = buttonContainer
        
        button.MouseEnter:Connect(function()
            if button.BackgroundColor3 ~= btn.OffColor then
                buttonGlow.Visible = true
                TweenService:Create(button, TweenInfo.new(0.2), {
                    Size = UDim2.new(1, 4, 1, 4),
                    Position = UDim2.new(0, -2, 0, -2)
                }):Play()
            end
        end)
        
        button.MouseLeave:Connect(function()
            buttonGlow.Visible = false
            TweenService:Create(button, TweenInfo.new(0.2), {
                Size = UDim2.new(1, 0, 1, 0),
                Position = UDim2.new(0, 0, 0, 0)
            }):Play()
        end)

        button.MouseButton1Click:Connect(function()
            local keys = string.split(btn.Key, ".")
            local current = Settings
            for i = 1, #keys - 1 do
                current = current[keys[i]]
            end
            current[keys[#keys]] = not current[keys[#keys]]
            
            if btn.Name == "Radar" then
                if Settings.Radar.Enabled then
                    CreateRadar()
                elseif radarFrame then
                    radarFrame.Parent:Destroy()
                    radarFrame = nil
                end
            end
            
            if btn.Name == "ThermalVision" then
                ToggleThermalVision(Settings.ThermalVision.Enabled)
            elseif btn.Name == "NightVision" then
                ToggleNightVision(Settings.NightVision.Enabled)
            end
            
            UpdateUI()
        end)

        buttonInstances[btn.Name] = button
        button.Parent = buttonContainer
        buttonContainer.Parent = scrollFrame
        yOffset = yOffset + 45
    end

    local statsPanel = Instance.new("Frame")
    statsPanel.Size = UDim2.new(0.9, 0, 0, 150)
    statsPanel.Position = UDim2.new(0.05, 0, 1, -160)
    statsPanel.BackgroundColor3 = PremiumColors.Panel
    statsPanel.BorderSizePixel = 0

    local statsCorner = Instance.new("UICorner")
    statsCorner.CornerRadius = UDim.new(0, 8)
    statsCorner.Parent = statsPanel

    local statsBorder = Instance.new("UIStroke")
    statsBorder.Color = PremiumColors.Primary
    statsBorder.Thickness = 2
    statsBorder.Parent = statsPanel
    
    local borderTween = TweenService:Create(statsBorder, TweenInfo.new(3, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut, -1, true), {
        Color = PremiumColors.Secondary
    })
    borderTween:Play()

    local statsPattern = Instance.new("ImageLabel")
    statsPattern.Size = UDim2.new(1, 0, 1, 0)
    statsPattern.Image = "rbxassetid://11543919876"
    statsPattern.ImageTransparency = 0.9
    statsPattern.BackgroundTransparency = 1
    statsPattern.Parent = statsPanel

    local targetLabel = Instance.new("TextLabel")
    targetLabel.Size = UDim2.new(1, -10, 0, 22)
    targetLabel.Position = UDim2.new(0, 10, 0, 10)
    targetLabel.Text = "üéØ Target: None"
    targetLabel.BackgroundTransparency = 1
    targetLabel.TextColor3 = PremiumColors.Light
    targetLabel.Font = Enum.Font.GothamBold
    targetLabel.TextSize = 12
    targetLabel.TextXAlignment = Enum.TextXAlignment.Left

    local statusLabel = Instance.new("TextLabel")
    statusLabel.Size = UDim2.new(1, -10, 0, 22)
    statusLabel.Position = UDim2.new(0, 10, 0, 32)
    statusLabel.Text = "üìä Status: Ready"
    statusLabel.BackgroundTransparency = 1
    statusLabel.TextColor3 = PremiumColors.Light
    statusLabel.Font = Enum.Font.GothamBold
    statusLabel.TextSize = 12
    statusLabel.TextXAlignment = Enum.TextXAlignment.Left

    local fpsLabel = Instance.new("TextLabel")
    fpsLabel.Size = UDim2.new(1, -10, 0, 22)
    fpsLabel.Position = UDim2.new(0, 10, 0, 54)
    fpsLabel.Text = "‚ö° FPS: 60"
    fpsLabel.BackgroundTransparency = 1
    fpsLabel.TextColor3 = PremiumColors.Light
    fpsLabel.Font = Enum.Font.GothamBold
    fpsLabel.TextSize = 12
    fpsLabel.TextXAlignment = Enum.TextXAlignment.Left

    local threatLabel = Instance.new("TextLabel")
    threatLabel.Size = UDim2.new(1, -10, 0, 22)
    threatLabel.Position = UDim2.new(0, 10, 0, 76)
    threatLabel.Text = "‚ö†Ô∏è Threat Level: 0"
    threatLabel.BackgroundTransparency = 1
    threatLabel.TextColor3 = PremiumColors.Light
    threatLabel.Font = Enum.Font.GothamBold
    threatLabel.TextSize = 12
    threatLabel.TextXAlignment = Enum.TextXAlignment.Left

    local distanceLabel = Instance.new("TextLabel")
    distanceLabel.Size = UDim2.new(1, -10, 0, 22)
    distanceLabel.Position = UDim2.new(0, 10, 0, 98)
    distanceLabel.Text = "üìè Distance: 0 studs"
    distanceLabel.BackgroundTransparency = 1
    distanceLabel.TextColor3 = PremiumColors.Light
    distanceLabel.Font = Enum.Font.GothamBold
    distanceLabel.TextSize = 12
    distanceLabel.TextXAlignment = Enum.TextXAlignment.Left

    local playstyleLabel = Instance.new("TextLabel")
    playstyleLabel.Size = UDim2.new(1, -10, 0, 22)
    playstyleLabel.Position = UDim2.new(0, 10, 0, 120)
    playstyleLabel.Text = "üé≠ Mode: Stealth"
    playstyleLabel.BackgroundTransparency = 1
    playstyleLabel.TextColor3 = PremiumColors.Light
    playstyleLabel.Font = Enum.Font.GothamBold
    playstyleLabel.TextSize = 12
    playstyleLabel.TextXAlignment = Enum.TextXAlignment.Left

    borderGlow.Parent = mainFrame
    titleBar.Parent = mainFrame
    title.Parent = titleBar
    statusLight.Parent = titleBar
    scrollFrame.Parent = mainFrame
    statsPanel.Parent = mainFrame
    targetLabel.Parent = statsPanel
    statusLabel.Parent = statsPanel
    fpsLabel.Parent = statsPanel
    threatLabel.Parent = statsPanel
    distanceLabel.Parent = statsPanel
    playstyleLabel.Parent = statsPanel
    mainFrame.Parent = screenGui

    return {
        Main = mainFrame,
        Buttons = buttonInstances,
        StatusLight = statusLight,
        TargetLabel = targetLabel,
        StatusLabel = statusLabel,
        FPSLabel = fpsLabel,
        ThreatLabel = threatLabel,
        DistanceLabel = distanceLabel,
        PlaystyleLabel = playstyleLabel,
        ButtonColors = buttons
    }
end

-- Initialize Premium UI
local UI = CreatePremiumUI()
threatLabel = UI.ThreatLabel

-- Enhanced UI Update Function with visual feedback
function UpdateUI()
    UI.StatusLight.BackgroundColor3 = Settings.Enabled and PremiumColors.Success or PremiumColors.Danger
    
    if playstyleMetrics.isStealthMode then
        UI.PlaystyleLabel.Text = "üé≠ Mode: Stealth (" .. math.floor(playstyleMetrics.detectionLevel * 100) .. "% detected)"
        UI.PlaystyleLabel.TextColor3 = Color3.fromRGB(100, 200, 255)
    else
        UI.PlaystyleLabel.Text = "üé≠ Mode: Combat (" .. math.floor(playstyleMetrics.detectionLevel * 100) .. "% detected)"
        UI.PlaystyleLabel.TextColor3 = PremiumColors.Danger
    end
    
    for name, button in pairs(UI.Buttons) do
        local btnData
        for _, data in ipairs(UI.ButtonColors) do
            if data.Name == name then
                btnData = data
                break
            end
        end
        
        if btnData then
            local value = Settings
            local keys = string.split(btnData.Key, ".")
            for _, key in ipairs(keys) do
                value = value[key]
            end
            
            button.BackgroundColor3 = value and btnData.OnColor or btnData.OffColor
            
            local gradient = button:FindFirstChildOfClass("UIGradient")
            if gradient then
                gradient.Color = ColorSequence.new({
                    ColorSequenceKeypoint.new(0, value and btnData.OnColor or btnData.OffColor),
                    ColorSequenceKeypoint.new(1, (value and btnData.OnColor or btnData.OffColor):Lerp(Color3.fromRGB(255, 255, 255), 0.1))
                })
            end
            
            if value then
                if name == "Humanizer" then
                    button.Text = "üéØ " .. btnData.Text
                elseif name == "SmartSwitch" then
                    button.Text = "üîÑ " .. btnData.Text
                elseif name == "Prediction" then
                    button.Text = "üîÆ " .. btnData.Text
                elseif name == "Radar" then
                    button.Text = "üì° " .. btnData.Text
                elseif name == "Adaptation" then
                    button.Text = "üß† " .. btnData.Text
                elseif name == "DynamicFOV" then
                    button.Text = "üëÅÔ∏è " .. btnData.Text
                elseif name == "ThermalVision" then
                    button.Text = "üêç " .. btnData.Text
                elseif name == "NightVision" then
                    button.Text = "üåô " .. btnData.Text
                else
                    button.Text = "‚úì " .. btnData.Text
                end
            else
                button.Text = "‚úó " .. btnData.Text
            end
        end
    end
end

-- FPS Counter
RunService.Heartbeat:Connect(function()
    frameCount = frameCount + 1
    if tick() - lastFPSUpdate >= 1 then
        currentFPS = math.floor(frameCount / (tick() - lastFPSUpdate))
        frameCount = 0
        lastFPSUpdate = tick()
        
        if UI then
            UI.FPSLabel.Text = "‚ö° FPS: " .. currentFPS
        end
    end
end)

-- Enhanced main loop with all systems integrated
RunService.RenderStepped:Connect(function()
    FOVCircle.Position = UserInputService:GetMouseLocation()
    FOVCircle.Visible = Settings.FOV.Visible
    
    UpdateAdaptiveFOV()
    
    if Settings.Radar.Enabled then
        UpdateRadar()
    end
    
    if Holding and Settings.Enabled then
        Target = FindOptimalTarget()
        
        if Target and Target.Character then
            local aimPart, partOffset = GetRandomizedAimPart(Target.Character)
            if aimPart then
                UI.TargetLabel.Text = "üéØ Target: " .. Target.Name
                UI.StatusLabel.Text = "üìä Status: Locked üîí"
                
                playstyleMetrics.lastCombatTime = tick()
                
                local rootPart = Target.Character:FindFirstChild("HumanoidRootPart")
                if rootPart then
                    local distance = (rootPart.Position - Camera.CFrame.Position).Magnitude
                    UI.DistanceLabel.Text = "üìè Distance: " .. math.floor(distance) .. " studs"
                    
                    if playstyleMetrics.engagementCount < 100 then
                        playstyleMetrics.engagementCount = playstyleMetrics.engagementCount + 1
                    end
                    playstyleMetrics.averageEngagementDistance = 
                        (playstyleMetrics.averageEngagementDistance * (playstyleMetrics.engagementCount - 1) + distance) / 
                        playstyleMetrics.engagementCount
                end
                
                if Settings.Highlight.Enabled then
                    local screenPoint = Camera:WorldToViewportPoint(aimPart.Position)
                    TargetIndicator.Position = Vector2.new(screenPoint.X, screenPoint.Y)
                    TargetIndicator.Visible = true
                    
                    LockIndicator.Position = Vector2.new(screenPoint.X, screenPoint.Y)
                    LockIndicator.Visible = true
                    
                    LockIndicator.Radius = 16 + math.sin(tick() * 5) * 2
                end
                
                local targetPos = CalculatePrediction(Target.Character, aimPart)
                if partOffset then
                    targetPos = targetPos + partOffset
                end
                targetPos = ApplyHumanizer(targetPos, tick(), Target.Character, aimPart)
                
                SmoothAim(targetPos)
                
                LastTargetTime = tick()
            end
        else
            UI.TargetLabel.Text = "üéØ Target: None"
            UI.StatusLabel.Text = "üìä Status: Searching..."
            UI.DistanceLabel.Text = "üìè Distance: 0 studs"
            TargetIndicator.Visible = false
            LockIndicator.Visible = false
        end
    else
        UI.StatusLabel.Text = "üìä Status: Ready"
        if tick() - LastTargetTime > 0.5 then
            UI.TargetLabel.Text = "üéØ Target: None"
            UI.DistanceLabel.Text = "üìè Distance: 0 studs"
        end
        TargetIndicator.Visible = false
        LockIndicator.Visible = false
    end
    
    if tick() % 1 < 0.05 then
        UpdateUI()
    end
end)

-- Initialization
InitializeVisionEffects()
CreateThermalHighlights()
TrackDamage()
TrackWeaponFire()
UpdateUI()
if Settings.Radar.Enabled then
    CreateRadar()
end

-- Player added event to create thermal highlights for new players
Players.PlayerAdded:Connect(function(player)
    player.CharacterAdded:Connect(function(character)
        wait(1) -- Wait for character to fully load
        if player ~= LocalPlayer then
            local highlight = Instance.new("Highlight")
            highlight.Name = "VenomThermalHighlight"
            highlight.FillColor = Settings.ThermalVision.HotColor
            highlight.OutlineColor = Color3.fromRGB(255, 70, 40)
            highlight.FillTransparency = 0.2
            highlight.OutlineTransparency = 0
            highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
            highlight.Enabled = Settings.ThermalVision.Enabled
            highlight.Parent = character
            thermalHighlights[player] = highlight
        end
    end)
end)

print("üêç Venom Reptile v8.3 Ultimate Stealth Edition Loaded!")
print("üî• ENHANCED THERMAL VISION | Red-Orange Hues | Player Highlighting | Eye Comfort Mode")
print("üåô OPTIMIZED NIGHT VISION | Green Tint | Reduced Strain | Better Performance")
print("üéØ PERFECT Threat System | 0-100 Scale | Realistic Assessment")
print("üß† Advanced Playstyle Adaptation | Movement-Based Detection")
print("üëÅÔ∏è  Intelligent Adaptive FOV | Performance & Engagement Based")
print("üîß Press F to toggle | Right-click to aim")
print("üì° Radar with 300 stud range and proper forward orientation")
print("üéØ Enhanced accuracy with reduced humanizer shake")
print("üí• Improved combat awareness with realistic detection")

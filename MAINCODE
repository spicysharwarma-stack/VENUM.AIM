--[[
    🐍 Venom Reptile v5.4 - Premium Edition
    Universal Xeno Executor Version - Optimized
]]

-- Services
local Camera = workspace.CurrentCamera
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()

-- Configuration
local Settings = {
    Enabled = true,
    TeamCheck = false,
    AimPart = "Head",
    Sensitivity = 0.06,
    FOV = {
        Radius = 130,
        Color = Color3.fromRGB(0, 255, 127),
        Transparency = 0.7,
        Filled = false,
        Visible = true,
        Thickness = 2,
        Sides = 64
    },
    VisibilityCheck = true,
    MaxDistance = 2500,
    Prediction = {
        Enabled = true,
        Strength = 0.165,
        VerticalAdjustment = 0.05
    },
    Highlight = {
        Enabled = true,
        Color = Color3.fromRGB(255, 215, 0)
    },
    Humanizer = {
        Enabled = true,
        Intensity = 0.3,
        MissChance = 0.15,
        MissCooldown = 0.5,
        BodyPartRandomization = 0.7
    },
    SmartSwitch = {
        Enabled = true,
        ThreatEvaluationInterval = 0.5
    },
    Radar = {
        Enabled = true,
        Size = 120,
        Range = 200,
        BackgroundTransparency = 0.8,
        Position = UDim2.new(1, -140, 1, -140)
    },
    FOVChangeOnAim = true,
    AimKey = Enum.UserInputType.MouseButton2,
    ToggleKey = Enum.KeyCode.F,
    -- New settings for improved targeting
    CloseRangePriority = 50, -- Extra threat score for close targets
    AnticipationMode = true, -- Try to anticipate targets behind cover
    AnticipationRange = 100, -- Range to anticipate targets (studs)
    RecentTargetMemory = 3 -- Remember recent targets for this many seconds
}

-- State Management
local Holding = false
local Target = nil
local LastTargetTime = 0
local threatLabel
local radarFrame
local radarDots = {}
local lastMissTime = 0
local lastHumanizerUpdate = 0
local recentTargets = {} -- Track recent targets for anticipation

-- FOV Circle
local FOVCircle = Drawing.new("Circle")
FOVCircle.Position = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
FOVCircle.Radius = Settings.FOV.Radius
FOVCircle.Filled = Settings.FOV.Filled
FOVCircle.Color = Settings.FOV.Color
FOVCircle.Visible = Settings.FOV.Visible
FOVCircle.Transparency = Settings.FOV.Transparency
FOVCircle.NumSides = Settings.FOV.Sides
FOVCircle.Thickness = Settings.FOV.Thickness

-- Target Indicator
local TargetIndicator = Drawing.new("Circle")
TargetIndicator.Visible = false
TargetIndicator.Radius = 12
TargetIndicator.Filled = true
TargetIndicator.Color = Settings.Highlight.Color
TargetIndicator.Transparency = 0.6
TargetIndicator.Thickness = 2

-- Performance Optimization
local cachedPlayers = {}
local lastPlayerUpdate = 0
local playerUpdateInterval = 1

-- Venom Color Scheme
local VenomColors = {
    Primary = Color3.fromRGB(0, 255, 127),
    Secondary = Color3.fromRGB(50, 205, 50),
    Accent = Color3.fromRGB(255, 215, 0),
    Dark = Color3.fromRGB(15, 25, 20),
    Light = Color3.fromRGB(144, 238, 144),
    Danger = Color3.fromRGB(220, 20, 60),
    Success = Color3.fromRGB(0, 255, 127)
}

-- Improved Prediction Engine
local function CalculatePrediction(targetChar, aimPart)
    if not Settings.Prediction.Enabled then return aimPart.Position end
    
    local humanoidRootPart = targetChar:FindFirstChild("HumanoidRootPart")
    if not humanoidRootPart then return aimPart.Position end
    
    local velocity = humanoidRootPart.Velocity
    local distance = (aimPart.Position - Camera.CFrame.Position).Magnitude
    
    -- More accurate travel time calculation
    local travelTime = distance / 1200
    
    -- Better prediction formula with vertical adjustment
    local predictedPos = aimPart.Position + velocity * travelTime * Settings.Prediction.Strength
    
    -- Add slight vertical adjustment for more natural aiming
    predictedPos = predictedPos + Vector3.new(0, Settings.Prediction.VerticalAdjustment, 0)
    
    return predictedPos
end

-- Enhanced Humanizer with miss chance
local function GetRandomizedAimPart(character)
    if not Settings.Humanizer.Enabled or math.random() > Settings.Humanizer.BodyPartRandomization then
        return character:FindFirstChild(Settings.AimPart) or character:FindFirstChild("Head")
    end
    
    local bodyParts = {
        "Head", "UpperTorso", "LowerTorso", "LeftUpperArm", "RightUpperArm",
        "LeftLowerArm", "RightLowerArm", "LeftHand", "RightHand",
        "LeftUpperLeg", "RightUpperLeg", "LeftLowerLeg", "RightLowerLeg", "LeftFoot", "RightFoot"
    }
    
    -- Weighted randomization
    local weights = {
        Head = 40,
        UpperTorso = 20,
        LowerTorso = 10,
        LeftUpperArm = 3, RightUpperArm = 3,
        LeftLowerArm = 2, RightLowerArm = 2,
        LeftHand = 1, RightHand = 1,
        LeftUpperLeg = 2, RightUpperLeg = 2,
        LeftLowerLeg = 1, RightLowerLeg = 1,
        LeftFoot = 1, RightFoot = 1
    }
    
    local totalWeight = 0
    for _, partName in ipairs(bodyParts) do
        if character:FindFirstChild(partName) then
            totalWeight = totalWeight + weights[partName]
        end
    end
    
    local randomValue = math.random(1, totalWeight)
    local cumulativeWeight = 0
    
    for _, partName in ipairs(bodyParts) do
        local part = character:FindFirstChild(partName)
        if part then
            cumulativeWeight = cumulativeWeight + weights[partName]
            if randomValue <= cumulativeWeight then
                return part
            end
        end
    end
    
    return character:FindFirstChild("Head") or character:FindFirstChild("UpperTorso")
end

-- Improved Humanizer with miss functionality
local function ApplyHumanizer(targetPosition, currentTime)
    if not Settings.Humanizer.Enabled then return targetPosition end
    
    -- Only update humanizer effects periodically for performance
    if currentTime - lastHumanizerUpdate < 0.05 then return targetPosition end
    lastHumanizerUpdate = currentTime
    
    -- Check if we should miss this shot
    if Settings.Humanizer.MissChance > 0 and currentTime - lastMissTime > Settings.Humanizer.MissCooldown then
        if math.random() < Settings.Humanizer.MissChance then
            lastMissTime = currentTime
            -- Add significant offset to simulate a miss
            local missOffset = Vector3.new(
                (math.random() - 0.5) * 5,  -- Larger offset for misses
                (math.random() - 0.5) * 5,
                (math.random() - 0.5) * 3
            )
            return targetPosition + missOffset
        end
    end
    
    -- Normal humanizer slight movement
    local sineWave = math.sin(currentTime * 5) * Settings.Humanizer.Intensity * 0.3
    local cosineWave = math.cos(currentTime * 4) * Settings.Humanizer.Intensity * 0.2
    
    local microShake = Vector3.new(
        (math.random() - 0.5 + sineWave) * Settings.Humanizer.Intensity * 0.4,
        (math.random() - 0.5 + cosineWave) * Settings.Humanizer.Intensity * 0.4,
        (math.random() - 0.5) * Settings.Humanizer.Intensity * 0.2
    )
    
    return targetPosition + microShake
end

-- Optimized Visibility Check
local function IsVisible(character)
    if not Settings.VisibilityCheck then return true end
    
    local aimPart = character:FindFirstChild(Settings.AimPart) or character:FindFirstChild("Head")
    if not aimPart then return false end
    
    local origin = Camera.CFrame.Position
    local destination = aimPart.Position
    local direction = (destination - origin).Unit
    
    local raycastParams = RaycastParams.new()
    raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
    raycastParams.FilterDescendantsInstances = {LocalPlayer.Character, Camera}
    raycastParams.IgnoreWater = true
    
    local result = workspace:Raycast(origin, direction * Settings.MaxDistance, raycastParams)
    
    if result and result.Instance then
        local hitModel = result.Instance:FindFirstAncestorWhichIsA("Model")
        return hitModel == character
    end
    
    return false
end

-- Efficient Player Cache System
local function UpdatePlayerCache()
    if tick() - lastPlayerUpdate < playerUpdateInterval then return end
    
    cachedPlayers = {}
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character then
            table.insert(cachedPlayers, player)
        end
    end
    
    lastPlayerUpdate = tick()
end

-- Improved threat evaluation with close range priority
local lastThreatEvaluation = 0
local function EvaluateThreatLevel(player)
    local character = player.Character
    if not character then return 0 end
    
    local threatScore = 0
    
    -- Distance factor (closer = more threat)
    local rootPart = character:FindFirstChild("HumanoidRootPart")
    if rootPart then
        local distance = (rootPart.Position - Camera.CFrame.Position).Magnitude
        threatScore = threatScore + (1000 / math.max(1, distance))
        
        -- Extra priority for very close targets
        if distance < 20 then
            threatScore = threatScore + Settings.CloseRangePriority
        end
    end
    
    -- Facing direction factor
    local head = character:FindFirstChild("Head")
    if head and rootPart then
        local directionToPlayer = (Camera.CFrame.Position - rootPart.Position).Unit
        local lookDirection = head.CFrame.LookVector
        local dotProduct = directionToPlayer:Dot(lookDirection)
        
        if dotProduct > 0.7 then
            threatScore = threatScore + 50
        elseif dotProduct < -0.7 then
            threatScore = threatScore - 20
        end
    end
    
    -- Weapon detection
    local tool = character:FindFirstChildOfClass("Tool")
    if tool then
        threatScore = threatScore + 30
    end
    
    -- Recent target memory (anticipate targets that were recently visible)
    local currentTime = tick()
    if Settings.AnticipationMode and recentTargets[player] then
        local timeSinceLastSeen = currentTime - recentTargets[player]
        if timeSinceLastSeen < Settings.RecentTargetMemory then
            -- Add threat based on how recently they were seen
            threatScore = threatScore + (50 * (1 - timeSinceLastSeen / Settings.RecentTargetMemory))
        end
    end
    
    return threatScore
end

-- Enhanced FindOptimalTarget with improved threat evaluation
local function FindOptimalTarget()
    UpdatePlayerCache()
    
    local bestTarget = nil
    local highestThreat = -1
    local mousePos = UserInputService:GetMouseLocation()
    local currentTime = tick()
    
    -- Clean up old recent targets
    for player, lastSeen in pairs(recentTargets) do
        if currentTime - lastSeen > Settings.RecentTargetMemory then
            recentTargets[player] = nil
        end
    end
    
    -- Evaluate threats at intervals for performance
    if Settings.SmartSwitch.Enabled and currentTime - lastThreatEvaluation >= Settings.SmartSwitch.ThreatEvaluationInterval then
        lastThreatEvaluation = currentTime
        
        for _, player in ipairs(cachedPlayers) do
            if Settings.TeamCheck and player.Team == LocalPlayer.Team then continue end
            
            local character = player.Character
            if not character then continue end
            
            local humanoid = character:FindFirstChildOfClass("Humanoid")
            if not humanoid or humanoid.Health <= 0 then continue end
            
            local rootPart = character:FindFirstChild("HumanoidRootPart")
            if not rootPart then continue end
            
            -- Check if target is within anticipation range even if not visible
            local distance = (rootPart.Position - Camera.CFrame.Position).Magnitude
            local isVisible = IsVisible(character)
            
            if isVisible then
                -- Update recent target memory
                recentTargets[player] = currentTime
            elseif distance > Settings.AnticipationRange then
                -- Skip targets that are too far and not visible
                continue
            end
            
            local threatLevel = EvaluateThreatLevel(player)
            if threatLevel > highestThreat then
                highestThreat = threatLevel
                bestTarget = player
            end
        end
    else
        -- Standard FOV-based targeting with close range priority
        local minDistance = Settings.FOV.Radius
        
        for _, player in ipairs(cachedPlayers) do
            if Settings.TeamCheck and player.Team == LocalPlayer.Team then continue end
            
            local character = player.Character
            if not character then continue end
            
            local humanoid = character:FindFirstChildOfClass("Humanoid")
            if not humanoid or humanoid.Health <= 0 then continue end
            
            local rootPart = character:FindFirstChild("HumanoidRootPart")
            if not rootPart then continue end
            
            -- Check if target is within anticipation range even if not visible
            local distance = (rootPart.Position - Camera.CFrame.Position).Magnitude
            local isVisible = IsVisible(character)
            
            if isVisible then
                -- Update recent target memory
                recentTargets[player] = currentTime
            elseif distance > Settings.AnticipationRange then
                -- Skip targets that are too far and not visible
                continue
            end
            
            local screenPoint, onScreen = Camera:WorldToViewportPoint(rootPart.Position)
            if not onScreen and distance > 50 then continue end -- Allow very close targets even if off-screen
            
            local distanceToMouse = (mousePos - Vector2.new(screenPoint.X, screenPoint.Y)).Magnitude
            
            -- Prioritize very close targets regardless of FOV
            if distance < 20 then
                bestTarget = player
                minDistance = 0
                break
            elseif distanceToMouse < minDistance then
                minDistance = distanceToMouse
                bestTarget = player
            end
        end
    end
    
    -- Update threat label even when no target is found
    if threatLabel then
        if bestTarget then
            local threatLevel = EvaluateThreatLevel(bestTarget)
            threatLabel.Text = "⚠️ Threat Level: " .. math.floor(threatLevel)
            
            -- Color code threat level
            if threatLevel > 100 then
                threatLabel.TextColor3 = VenomColors.Danger
            elseif threatLevel > 70 then
                threatLabel.TextColor3 = Color3.fromRGB(255, 140, 0)
            elseif threatLevel > 50 then
                threatLabel.TextColor3 = VenomColors.Accent
            elseif threatLevel > 30 then
                threatLabel.TextColor3 = Color3.fromRGB(144, 238, 144)
            else
                threatLabel.TextColor3 = VenomColors.Light
            end
        else
            threatLabel.Text = "⚠️ Threat Level: 0"
            threatLabel.TextColor3 = VenomColors.Light
        end
    end
    
    return bestTarget
end

-- Smooth Aiming System
local function SmoothAim(targetPosition)
    local currentCFrame = Camera.CFrame
    local targetCFrame = CFrame.new(currentCFrame.Position, targetPosition)
    
    TweenService:Create(Camera, TweenInfo.new(Settings.Sensitivity, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {
        CFrame = targetCFrame
    }):Play()
end

-- Fixed Radar System with correct orientation
local function CreateRadar()
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "VenomRadar_" .. math.random(10000, 99999)
    screenGui.Parent = game.CoreGui
    screenGui.ResetOnSpawn = false
    screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    
    -- Main radar frame
    radarFrame = Instance.new("Frame")
    radarFrame.Size = UDim2.new(0, Settings.Radar.Size, 0, Settings.Radar.Size)
    radarFrame.Position = Settings.Radar.Position
    radarFrame.BackgroundColor3 = Color3.fromRGB(20, 25, 22)
    radarFrame.BackgroundTransparency = Settings.Radar.BackgroundTransparency
    radarFrame.BorderSizePixel = 0
    radarFrame.Active = true
    radarFrame.Draggable = true
    
    -- Radar border with venom glow
    local radarBorder = Instance.new("UIStroke")
    radarBorder.Color = VenomColors.Primary
    radarBorder.Thickness = 2
    radarBorder.Parent = radarFrame
    
    -- Animate the border
    local borderTween = TweenService:Create(radarBorder, TweenInfo.new(3, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut, -1, true), {
        Color = VenomColors.Secondary
    })
    borderTween:Play()
    
    -- Radar corner
    local radarCorner = Instance.new("UICorner")
    radarCorner.CornerRadius = UDim.new(1, 0)
    radarCorner.Parent = radarFrame
    
    -- Radar grid lines
    local gridLines = {
        {From = UDim2.new(0.5, 0, 0, 0), To = UDim2.new(0.5, 0, 1, 0)}, -- Vertical center
        {From = UDim2.new(0, 0, 0.5, 0), To = UDim2.new(1, 0, 0.5, 0)}, -- Horizontal center
    }
    
    for _, line in ipairs(gridLines) do
        local lineFrame = Instance.new("Frame")
        lineFrame.Size = UDim2.new(0, 1, 0, 1)
        lineFrame.Position = line.From
        lineFrame.AnchorPoint = Vector2.new(0.5, 0.5)
        lineFrame.BackgroundColor3 = VenomColors.Primary
        lineFrame.BackgroundTransparency = 0.7
        lineFrame.BorderSizePixel = 0
        lineFrame.Parent = radarFrame
        
        local lineTween = TweenService:Create(lineFrame, TweenInfo.new(0.5), {
            Size = line.To
        })
        lineTween:Play()
    end
    
    -- Player dot (self)
    local selfDot = Instance.new("Frame")
    selfDot.Size = UDim2.new(0, 6, 0, 6)
    selfDot.Position = UDim2.new(0.5, -3, 0.5, -3)
    selfDot.BackgroundColor3 = VenomColors.Primary
    selfDot.BorderSizePixel = 0
    selfDot.ZIndex = 3
    selfDot.Parent = radarFrame
    
    local selfDotCorner = Instance.new("UICorner")
    selfDotCorner.CornerRadius = UDim.new(1, 0)
    selfDotCorner.Parent = selfDot
    
    -- Add pulsing animation to self dot
    local pulseTween = TweenService:Create(selfDot, TweenInfo.new(1, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut, -1, true), {
        Size = UDim2.new(0, 8, 0, 8),
        Position = UDim2.new(0.5, -4, 0.5, -4)
    })
    pulseTween:Play()
    
    -- Radar range indicator
    local rangeLabel = Instance.new("TextLabel")
    rangeLabel.Size = UDim2.new(1, 0, 0, 15)
    rangeLabel.Position = UDim2.new(0, 0, 1, 5)
    rangeLabel.Text = "Range: " .. Settings.Radar.Range .. " studs"
    rangeLabel.BackgroundTransparency = 1
    rangeLabel.TextColor3 = VenomColors.Light
    rangeLabel.Font = Enum.Font.GothamBold
    rangeLabel.TextSize = 10
    rangeLabel.TextXAlignment = Enum.TextXAlignment.Center
    rangeLabel.Parent = radarFrame
    
    radarFrame.Parent = screenGui
    return screenGui
end

local function UpdateRadar()
    if not Settings.Radar.Enabled or not radarFrame then return end
    
    -- Clear previous dots
    for playerName, dot in pairs(radarDots) do
        if dot and dot.Parent then
            dot:Destroy()
        end
    end
    radarDots = {}
    
    -- Get player positions and update radar
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character then
            local character = player.Character
            local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
            local humanoid = character:FindFirstChildOfClass("Humanoid")
            
            if humanoidRootPart and humanoid and humanoid.Health > 0 then
                -- Calculate position relative to local player
                local localRoot = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
                if not localRoot then continue end
                
                local position = humanoidRootPart.Position
                local localPosition = localRoot.Position
                
                -- Calculate direction and distance
                local direction = (position - localPosition) * Vector3.new(1, 0, 1) -- Ignore Y axis
                local distance = direction.Magnitude
                
                -- Skip if beyond radar range
                if distance > Settings.Radar.Range then continue end
                
                -- Calculate radar position (normalized to radar size)
                local normalizedDistance = distance / Settings.Radar.Range
                
                -- FIXED: Correct radar orientation (top of radar = forward direction)
                -- Get camera's look vector to determine forward direction
                local cameraLook = Camera.CFrame.LookVector
                local angleToCamera = math.atan2(cameraLook.X, cameraLook.Z)
                
                -- Calculate angle from player to target, adjusted by camera rotation
                local angle = math.atan2(direction.Z, direction.X) - angleToCamera - math.pi/2
                
                -- Convert to radar coordinates
                local radarX = 0.5 + math.cos(angle) * normalizedDistance * 0.5
                local radarY = 0.5 - math.sin(angle) * normalizedDistance * 0.5
                
                -- Create or update radar dot
                local dot = Instance.new("Frame")
                dot.Size = UDim2.new(0, 8, 0, 8)
                dot.Position = UDim2.new(radarX, -4, radarY, -4)
                dot.AnchorPoint = Vector2.new(0.5, 0.5)
                dot.BorderSizePixel = 0
                dot.ZIndex = 2
                
                -- Color code based on threat level
                local threatLevel = EvaluateThreatLevel(player)
                local dotColor
                
                if threatLevel > 100 then
                    dotColor = VenomColors.Danger
                elseif threatLevel > 70 then
                    local ratio = (threatLevel - 70) / 30
                    dotColor = Color3.fromRGB(255, 140, 0):Lerp(VenomColors.Danger, ratio)
                elseif threatLevel > 50 then
                    local ratio = (threatLevel - 50) / 20
                    dotColor = VenomColors.Accent:Lerp(Color3.fromRGB(255, 140, 0), ratio)
                elseif threatLevel > 30 then
                    local ratio = (threatLevel - 30) / 20
                    dotColor = Color3.fromRGB(144, 238, 144):Lerp(VenomColors.Accent, ratio)
                else
                    dotColor = VenomColors.Light
                end
                
                dot.BackgroundColor3 = dotColor
                
                -- Add corner to make it circular
                local dotCorner = Instance.new("UICorner")
                dotCorner.CornerRadius = UDim.new(1, 0)
                dotCorner.Parent = dot
                
                -- Add glow effect for high threat targets
                if threatLevel > 70 then
                    local glow = Instance.new("UIStroke")
                    glow.Color = dotColor
                    glow.Thickness = 2
                    glow.Transparency = 0.5
                    glow.Parent = dot
                    
                    -- Animate the glow
                    local glowTween = TweenService:Create(glow, TweenInfo.new(0.8, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut, -1, true), {
                        Thickness = 3
                    })
                    glowTween:Play()
                end
                
                -- Add player name tooltip
                local tooltip = Instance.new("TextLabel")
                tooltip.Size = UDim2.new(0, 0, 0, 0)
                tooltip.Position = UDim2.new(0.5, 0, 0, -15)
                tooltip.Text = player.Name
                tooltip.BackgroundTransparency = 1
                tooltip.TextColor3 = VenomColors.Light
                tooltip.Font = Enum.Font.GothamBold
                tooltip.TextSize = 10
                tooltip.TextXAlignment = Enum.TextXAlignment.Center
                tooltip.Visible = false
                tooltip.Parent = dot
                
                -- Show tooltip on mouse enter
                dot.MouseEnter:Connect(function()
                    tooltip.Size = UDim2.new(0, 60, 0, 15)
                    tooltip.Position = UDim2.new(0.5, -30, 0, -18)
                    tooltip.Visible = true
                end)
                
                dot.MouseLeave:Connect(function()
                    tooltip.Visible = false
                end)
                
                dot.Parent = radarFrame
                radarDots[player.Name] = dot
            end
        end
    end
end

-- Input Handling
UserInputService.InputBegan:Connect(function(input)
    if input.UserInputType == Settings.AimKey then
        Holding = true
        if Settings.FOVChangeOnAim then
            FOVCircle.Radius = Settings.FOV.Radius * 0.6
        end
    end
    
    if input.KeyCode == Settings.ToggleKey then
        Settings.Enabled = not Settings.Enabled
        UpdateUI()
    end
end)

UserInputService.InputEnded:Connect(function(input)
    if input.UserInputType == Settings.AimKey then
        Holding = false
        TargetIndicator.Visible = false
        if Settings.FOVChangeOnAim then
            FOVCircle.Radius = Settings.FOV.Radius
        end
    end
end)

-- Premium UI with textures and patterns
local function CreatePremiumUI()
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "VenomReptilePremiumUI_" .. math.random(10000, 99999)
    screenGui.Parent = game.CoreGui
    screenGui.ResetOnSpawn = false
    screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

    -- Main container with premium design
    local mainFrame = Instance.new("Frame")
    mainFrame.Size = UDim2.new(0, 320, 0, 450)
    mainFrame.Position = UDim2.new(0, 10, 0, 10)
    mainFrame.BackgroundColor3 = Color3.fromRGB(20, 25, 22)
    mainFrame.BorderSizePixel = 0
    mainFrame.Active = true
    mainFrame.Draggable = true

    -- Premium background pattern
    local pattern = Instance.new("ImageLabel")
    pattern.Size = UDim2.new(1, 0, 1, 0)
    pattern.Position = UDim2.new(0, 0, 0, 0)
    pattern.Image = "rbxassetid://11543912338"
    pattern.ImageTransparency = 0.1
    pattern.ScaleType = Enum.ScaleType.Tile
    pattern.TileSize = UDim2.new(0, 100, 0, 100)
    pattern.BackgroundTransparency = 1
    pattern.Parent = mainFrame

    -- Venom gradient overlay
    local gradient = Instance.new("UIGradient")
    gradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 30, 20)),
        ColorSequenceKeypoint.new(0.5, Color3.fromRGB(0, 50, 35)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 30, 20))
    })
    gradient.Rotation = 120
    gradient.Transparency = NumberSequence.new(0.5)
    gradient.Parent = pattern

    -- Premium border with glow effect
    local borderGlow = Instance.new("Frame")
    borderGlow.Size = UDim2.new(1, 6, 1, 6)
    borderGlow.Position = UDim2.new(0, -3, 0, -3)
    borderGlow.BackgroundColor3 = VenomColors.Primary
    borderGlow.BorderSizePixel = 0
    borderGlow.ZIndex = 0
    
    local glowCorner = Instance.new("UICorner")
    glowCorner.CornerRadius = UDim.new(0, 12)
    glowCorner.Parent = borderGlow
    
    local glowGradient = Instance.new("UIGradient")
    glowGradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, VenomColors.Primary),
        ColorSequenceKeypoint.new(1, VenomColors.Secondary)
    })
    glowGradient.Rotation = 45
    glowGradient.Parent = borderGlow
    
    -- Animate the glow
    local glowTween = TweenService:Create(glowGradient, TweenInfo.new(2, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut, -1, true), {
        Rotation = 405
    })
    glowTween:Play()

    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 10)
    corner.Parent = mainFrame

    -- Venomous title bar with animated pattern
    local titleBar = Instance.new("Frame")
    titleBar.Size = UDim2.new(1, 0, 0, 40)
    titleBar.Position = UDim2.new(0, 0, 0, 0)
    titleBar.BackgroundColor3 = VenomColors.Primary
    titleBar.BorderSizePixel = 0
    titleBar.ZIndex = 2

    local titlePattern = Instance.new("ImageLabel")
    titlePattern.Size = UDim2.new(1, 0, 1, 0)
    titlePattern.Image = "rbxassetid://11543914562"
    titlePattern.ImageTransparency = 0.2
    titlePattern.ScaleType = Enum.ScaleType.Tile
    titlePattern.TileSize = UDim2.new(0, 50, 0, 50)
    titlePattern.BackgroundTransparency = 1
    titlePattern.Parent = titleBar

    local titleCorner = Instance.new("UICorner")
    titleCorner.CornerRadius = UDim.new(0, 10)
    titleCorner.Parent = titleBar

    local title = Instance.new("TextLabel")
    title.Size = UDim2.new(1, -40, 1, 0)
    title.Position = UDim2.new(0, 15, 0, 0)
    title.Text = "🐍 VENOM REPTILE v5.4 PREMIUM"
    title.BackgroundTransparency = 1
    title.TextColor3 = Color3.fromRGB(255, 255, 255)
    title.Font = Enum.Font.GothamBlack
    title.TextSize = 16
    title.TextXAlignment = Enum.TextXAlignment.Left
    title.ZIndex = 3

    local statusLight = Instance.new("Frame")
    statusLight.Size = UDim2.new(0, 10, 0, 10)
    statusLight.Position = UDim2.new(1, -25, 0.5, -5)
    statusLight.BackgroundColor3 = VenomColors.Success
    statusLight.BorderSizePixel = 0
    statusLight.ZIndex = 3

    local statusCorner = Instance.new("UICorner")
    statusCorner.CornerRadius = UDim.new(1, 0)
    statusCorner.Parent = statusLight

    -- Add pulsing animation to status light
    local pulseTween = TweenService:Create(statusLight, TweenInfo.new(0.8, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut, -1, true), {
        Size = UDim2.new(0, 12, 0, 12),
        Position = UDim2.new(1, -26, 0.5, -6)
    })
    pulseTween:Play()

    -- Premium control buttons with hover effects
    local buttons = {
        {Name = "Toggle", Text = "TOGGLE AIMBOT (F)", Key = "Enabled", OnColor = VenomColors.Primary, OffColor = VenomColors.Danger},
        {Name = "Prediction", Text = "PREDICTION", Key = "Prediction.Enabled", OnColor = VenomColors.Secondary, OffColor = Color3.fromRGB(60, 60, 60)},
        {Name = "WallCheck", Text = "WALL CHECK", Key = "VisibilityCheck", OnColor = VenomColors.Accent, OffColor = Color3.fromRGB(60, 60, 60)},
        {Name = "TeamCheck", Text = "TEAM CHECK", Key = "TeamCheck", OnColor = VenomColors.Light, OffColor = Color3.fromRGB(60, 60, 60)},
        {Name = "Humanizer", Text = "BODY RANDOMIZER", Key = "Humanizer.Enabled", OnColor = VenomColors.Success, OffColor = Color3.fromRGB(60, 60, 60)},
        {Name = "SmartSwitch", Text = "SMART SWITCH", Key = "SmartSwitch.Enabled", OnColor = Color3.fromRGB(160, 90, 255), OffColor = Color3.fromRGB(60, 60, 60)},
        {Name = "Radar", Text = "RADAR SYSTEM", Key = "Radar.Enabled", OnColor = Color3.fromRGB(0, 150, 255), OffColor = Color3.fromRGB(60, 60, 60)},
        {Name = "Anticipation", Text = "ANTICIPATION MODE", Key = "AnticipationMode", OnColor = Color3.fromRGB(255, 105, 180), OffColor = Color3.fromRGB(60, 60, 60)}
    }

    local buttonInstances = {}
    local yOffset = 50

    for i, btn in ipairs(buttons) do
        local buttonContainer = Instance.new("Frame")
        buttonContainer.Size = UDim2.new(0.9, 0, 0, 40)
        buttonContainer.Position = UDim2.new(0.05, 0, 0, yOffset)
        buttonContainer.BackgroundTransparency = 1
        
        local button = Instance.new("TextButton")
        button.Size = UDim2.new(1, 0, 1, 0)
        button.Text = btn.Text
        button.BackgroundColor3 = Settings.Enabled and btn.OnColor or btn.OffColor
        button.TextColor3 = Color3.fromRGB(255, 255, 255)
        button.Font = Enum.Font.GothamBold
        button.TextSize = 12
        button.AutoButtonColor = false
        
        -- Premium button styling
        local buttonCorner = Instance.new("UICorner")
        buttonCorner.CornerRadius = UDim.new(0, 8)
        buttonCorner.Parent = button

        -- Add premium gradient to buttons
        local buttonGradient = Instance.new("UIGradient")
        buttonGradient.Color = ColorSequence.new({
            ColorSequenceKeypoint.new(0, btn.OnColor),
            ColorSequenceKeypoint.new(1, btn.OnColor:Lerp(Color3.fromRGB(255, 255, 255), 0.1))
        })
        buttonGradient.Rotation = 90
        buttonGradient.Parent = button

        -- Add subtle pattern to buttons
        local buttonPattern = Instance.new("ImageLabel")
        buttonPattern.Size = UDim2.new(1, 0, 1, 0)
        buttonPattern.Image = "rbxassetid://11543917824"
        buttonPattern.ImageTransparency = 0.8
        buttonPattern.BackgroundTransparency = 1
        buttonPattern.Parent = button

        -- Add glow effect on hover
        local buttonGlow = Instance.new("Frame")
        buttonGlow.Size = UDim2.new(1, 6, 1, 6)
        buttonGlow.Position = UDim2.new(0, -3, 0, -3)
        buttonGlow.BackgroundColor3 = btn.OnColor
        buttonGlow.BorderSizePixel = 0
        buttonGlow.ZIndex = -1
        buttonGlow.Visible = false
        
        local glowCorner = Instance.new("UICorner")
        glowCorner.CornerRadius = UDim.new(0, 10)
        glowCorner.Parent = buttonGlow
        
        buttonGlow.Parent = buttonContainer
        
        button.MouseEnter:Connect(function()
            if button.BackgroundColor3 ~= btn.OffColor then
                buttonGlow.Visible = true
                TweenService:Create(button, TweenInfo.new(0.2), {
                    Size = UDim2.new(1, 4, 1, 4),
                    Position = UDim2.new(0, -2, 0, -2)
                }):Play()
            end
        end)
        
        button.MouseLeave:Connect(function()
            buttonGlow.Visible = false
            TweenService:Create(button, TweenInfo.new(0.2), {
                Size = UDim2.new(1, 0, 1, 0),
                Position = UDim2.new(0, 0, 0, 0)
            }):Play()
        end)

        button.MouseButton1Click:Connect(function()
            local keys = string.split(btn.Key, ".")
            local current = Settings
            for i = 1, #keys - 1 do
                current = current[keys[i]]
            end
            current[keys[#keys]] = not current[keys[#keys]]
            
            -- Special handling for radar
            if btn.Name == "Radar" then
                if Settings.Radar.Enabled then
                    CreateRadar()
                elseif radarFrame then
                    radarFrame.Parent:Destroy()
                    radarFrame = nil
                end
            end
            
            UpdateUI()
        end)

        buttonInstances[btn.Name] = button
        button.Parent = buttonContainer
        buttonContainer.Parent = mainFrame
        yOffset = yOffset + 45
    end

    -- Premium stats panel with animated elements
    local statsPanel = Instance.new("Frame")
    statsPanel.Size = UDim2.new(0.9, 0, 0, 120)
    statsPanel.Position = UDim2.new(0.05, 0, 0, yOffset + 15)
    statsPanel.BackgroundColor3 = Color3.fromRGB(25, 35, 30)
    statsPanel.BorderSizePixel = 0

    local statsCorner = Instance.new("UICorner")
    statsCorner.CornerRadius = UDim.new(0, 8)
    statsCorner.Parent = statsPanel

    -- Add animated border to stats panel
    local statsBorder = Instance.new("UIStroke")
    statsBorder.Color = VenomColors.Primary
    statsBorder.Thickness = 2
    statsBorder.Parent = statsPanel
    
    -- Animate the border
    local borderTween = TweenService:Create(statsBorder, TweenInfo.new(3, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut, -1, true), {
        Color = VenomColors.Secondary
    })
    borderTween:Play()

    -- Add pattern to stats panel
    local statsPattern = Instance.new("ImageLabel")
    statsPattern.Size = UDim2.new(1, 0, 1, 0)
    statsPattern.Image = "rbxassetid://11543919876"
    statsPattern.ImageTransparency = 0.9
    statsPattern.BackgroundTransparency = 1
    statsPattern.Parent = statsPanel

    local targetLabel = Instance.new("TextLabel")
    targetLabel.Size = UDim2.new(1, -10, 0, 22)
    targetLabel.Position = UDim2.new(0, 10, 0, 10)
    targetLabel.Text = "🎯 Target: None"
    targetLabel.BackgroundTransparency = 1
    targetLabel.TextColor3 = VenomColors.Light
    targetLabel.Font = Enum.Font.GothamBold
    targetLabel.TextSize = 12
    targetLabel.TextXAlignment = Enum.TextXAlignment.Left

    local statusLabel = Instance.new("TextLabel")
    statusLabel.Size = UDim2.new(1, -10, 0, 22)
    statusLabel.Position = UDim2.new(0, 10, 0, 32)
    statusLabel.Text = "📊 Status: Ready"
    statusLabel.BackgroundTransparency = 1
    statusLabel.TextColor3 = VenomColors.Light
    statusLabel.Font = Enum.Font.GothamBold
    statusLabel.TextSize = 12
    statusLabel.TextXAlignment = Enum.TextXAlignment.Left

    local fpsLabel = Instance.new("TextLabel")
    fpsLabel.Size = UDim2.new(1, -10, 0, 22)
    fpsLabel.Position = UDim2.new(0, 10, 0, 54)
    fpsLabel.Text = "⚡ FPS: 60"
    fpsLabel.BackgroundTransparency = 1
    fpsLabel.TextColor3 = VenomColors.Light
    fpsLabel.Font = Enum.Font.GothamBold
    fpsLabel.TextSize = 12
    fpsLabel.TextXAlignment = Enum.TextXAlignment.Left

    local threatLabel = Instance.new("TextLabel")
    threatLabel.Size = UDim2.new(1, -10, 0, 22)
    threatLabel.Position = UDim2.new(0, 10, 0, 76)
    threatLabel.Text = "⚠️ Threat Level: 0"
    threatLabel.BackgroundTransparency = 1
    threatLabel.TextColor3 = VenomColors.Light
    threatLabel.Font = Enum.Font.GothamBold
    threatLabel.TextSize = 12
    threatLabel.TextXAlignment = Enum.TextXAlignment.Left

    local distanceLabel = Instance.new("TextLabel")
    distanceLabel.Size = UDim2.new(1, -10, 0, 22)
    distanceLabel.Position = UDim2.new(0, 10, 0, 98)
    distanceLabel.Text = "📏 Distance: 0 studs"
    distanceLabel.BackgroundTransparency = 1
    distanceLabel.TextColor3 = VenomColors.Light
    distanceLabel.Font = Enum.Font.GothamBold
    distanceLabel.TextSize = 12
    distanceLabel.TextXAlignment = Enum.TextXAlignment.Left

    -- Assembly
    borderGlow.Parent = mainFrame
    titleBar.Parent = mainFrame
    title.Parent = titleBar
    statusLight.Parent = titleBar
    statsPanel.Parent = mainFrame
    targetLabel.Parent = statsPanel
    statusLabel.Parent = statsPanel
    fpsLabel.Parent = statsPanel
    threatLabel.Parent = statsPanel
    distanceLabel.Parent = statsPanel
    mainFrame.Parent = screenGui

    return {
        Main = mainFrame,
        Buttons = buttonInstances,
        StatusLight = statusLight,
        TargetLabel = targetLabel,
        StatusLabel = statusLabel,
        FPSLabel = fpsLabel,
        ThreatLabel = threatLabel,
        DistanceLabel = distanceLabel,
        ButtonColors = buttons
    }
end

-- Initialize Premium UI
local UI = CreatePremiumUI()
threatLabel = UI.ThreatLabel

-- Enhanced UI Update Function with visual feedback
function UpdateUI()
    UI.StatusLight.BackgroundColor3 = Settings.Enabled and VenomColors.Success or VenomColors.Danger
    
    for name, button in pairs(UI.Buttons) do
        local btnData
        for _, data in ipairs(UI.ButtonColors) do
            if data.Name == name then
                btnData = data
                break
            end
        end
        
        if btnData then
            local value = Settings
            local keys = string.split(btnData.Key, ".")
            for _, key in ipairs(keys) do
                value = value[key]
            end
            
            button.BackgroundColor3 = value and btnData.OnColor or btnData.OffColor
            
            -- Update button gradient
            local gradient = button:FindFirstChildOfClass("UIGradient")
            if gradient then
                gradient.Color = ColorSequence.new({
                    ColorSequenceKeypoint.new(0, value and btnData.OnColor or btnData.OffColor),
                    ColorSequenceKeypoint.new(1, (value and btnData.OnColor or btnData.OffColor):Lerp(Color3.fromRGB(255, 255, 255), 0.1))
                })
            end
            
            -- Add checkmark indicator for ON state with fun emojis
            if value then
                if name == "Humanizer" then
                    button.Text = "🎯 " .. btnData.Text
                elseif name == "SmartSwitch" then
                    button.Text = "🔄 " .. btnData.Text
                elseif name == "Prediction" then
                    button.Text = "🔮 " .. btnData.Text
                elseif name == "Radar" then
                    button.Text = "📡 " .. btnData.Text
                else
                    button.Text = "✓ " .. btnData.Text
                end
            else
                button.Text = "✗ " .. btnData.Text
            end
        end
    end
end

-- FPS Counter
local lastFPSUpdate = 0
local frameCount = 0
local currentFPS = 60

RunService.Heartbeat:Connect(function()
    frameCount = frameCount + 1
    if tick() - lastFPSUpdate >= 1 then
        currentFPS = math.floor(frameCount / (tick() - lastFPSUpdate))
        frameCount = 0
        lastFPSUpdate = tick()
        
        if UI then
            UI.FPSLabel.Text = "⚡ FPS: " .. currentFPS
        end
    end
end)

-- Enhanced main loop with threat level display and radar
RunService.RenderStepped:Connect(function()
    FOVCircle.Position = UserInputService:GetMouseLocation()
    FOVCircle.Visible = Settings.FOV.Visible
    
    -- Update radar if enabled
    if Settings.Radar.Enabled then
        UpdateRadar()
    end
    
    if Holding and Settings.Enabled then
        Target = FindOptimalTarget()
        
        if Target and Target.Character then
            local aimPart = GetRandomizedAimPart(Target.Character)
            if aimPart then
                -- Update UI
                UI.TargetLabel.Text = "🎯 Target: " .. Target.Name
                UI.StatusLabel.Text = "📊 Status: Locked 🔒"
                
                -- Update distance label
                local rootPart = Target.Character:FindFirstChild("HumanoidRootPart")
                if rootPart then
                    local distance = (rootPart.Position - Camera.CFrame.Position).Magnitude
                    UI.DistanceLabel.Text = "📏 Distance: " .. math.floor(distance) .. " studs"
                end
                
                -- Update target indicator
                if Settings.Highlight.Enabled then
                    local screenPoint = Camera:WorldToViewportPoint(aimPart.Position)
                    TargetIndicator.Position = Vector2.new(screenPoint.X, screenPoint.Y)
                    TargetIndicator.Visible = true
                end
                
                -- Calculate and apply aim
                local targetPos = CalculatePrediction(Target.Character, aimPart)
                targetPos = ApplyHumanizer(targetPos, tick())
                
                SmoothAim(targetPos)
                
                LastTargetTime = tick()
            end
        else
            UI.TargetLabel.Text = "🎯 Target: None"
            UI.StatusLabel.Text = "📊 Status: Searching..."
            UI.DistanceLabel.Text = "📏 Distance: 0 studs"
            TargetIndicator.Visible = false
        end
    else
        UI.StatusLabel.Text = "📊 Status: Ready"
        if tick() - LastTargetTime > 0.5 then
            UI.TargetLabel.Text = "🎯 Target: None"
            UI.DistanceLabel.Text = "📏 Distance: 0 studs"
        end
        TargetIndicator.Visible = false
    end
end)

-- Initialization
UpdateUI()
if Settings.Radar.Enabled then
    CreateRadar()
end
print("🐍 Venom Reptile v5.4 Premium Loaded!")
print("🎯 Toxic Precision | Premium Design | Undetectable")
print("🔧 Press F to toggle | Right-click to aim")
print("💚 Buttons show fun indicators when ON | ✗ when OFF")
print("🔄 Smart Switch automatically finds the most dangerous target")
print("🎯 Body Randomizer increases hit chance with smart part selection")
print("⚠️ Threat Meter shows danger level of targets with color coding")
print("📡 Radar System shows player positions with threat-based coloring")
print("🔍 Anticipation Mode remembers recent targets behind cover")
